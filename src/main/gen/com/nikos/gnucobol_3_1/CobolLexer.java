/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.nikos.gnucobol_3_1;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.nikos.gnucobol_3_1.psi.CobolTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Cobol.flex</tt>
 */
class CobolLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ITEM_TYPE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15424 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\4\11\1\46\1\47\1\50\1\11\1\51\1\11\1\52\1\53\4\11\51"+
    "\14\1\54\3\14\1\55\1\56\4\14\1\57\6\14\1\60\3\11\1\61\u02c1\11\1\62\277\11");

  /* The ZZ_CMAP_Y table has 3264 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\11\1\14\1\11\1\14\34"+
    "\11\1\15\1\16\1\17\1\20\7\11\1\21\1\22\1\11\1\23\4\11\1\24\10\11\1\25\12\11"+
    "\1\4\1\11\1\26\1\4\1\11\1\27\1\4\1\11\1\30\1\31\1\11\1\32\1\33\1\34\1\35\4"+
    "\11\1\36\6\11\1\37\1\40\1\41\1\42\3\11\1\43\6\11\1\16\3\11\1\44\2\11\1\45"+
    "\1\20\1\11\1\1\1\32\3\20\1\11\1\46\1\20\1\47\10\11\1\50\1\4\1\51\1\52\1\40"+
    "\1\53\1\54\1\55\1\50\1\56\1\57\1\52\1\40\1\60\1\61\1\62\1\63\1\64\1\65\1\23"+
    "\1\40\1\66\1\67\1\70\1\50\1\71\1\72\1\52\1\40\1\66\1\73\1\74\1\50\1\75\1\76"+
    "\1\77\1\100\1\36\1\101\1\102\1\63\1\103\1\104\1\105\1\40\1\106\1\107\1\110"+
    "\1\50\1\20\1\104\1\105\1\40\1\111\1\107\1\112\1\50\1\113\1\104\1\105\2\11"+
    "\1\114\1\115\1\50\1\116\1\117\1\120\1\11\1\121\1\122\1\123\1\63\1\124\1\4"+
    "\2\11\1\125\1\126\1\127\2\20\1\130\1\131\1\132\1\133\1\134\1\135\2\20\1\70"+
    "\1\136\1\127\1\137\1\140\1\11\1\141\1\4\1\142\1\140\1\11\1\141\1\143\3\20"+
    "\4\11\1\127\4\11\1\45\2\11\1\144\2\11\1\145\24\11\1\146\1\147\2\11\1\146\2"+
    "\11\1\150\1\151\1\14\3\11\1\151\3\11\1\43\2\20\1\11\1\20\5\11\1\152\1\4\45"+
    "\11\1\41\1\11\1\4\1\32\4\11\1\153\1\154\1\155\1\156\1\11\1\156\1\11\1\157"+
    "\1\155\1\160\5\11\1\161\1\127\1\20\1\162\1\127\5\11\1\163\2\11\1\32\4\11\1"+
    "\64\1\11\1\126\2\1\1\63\1\11\1\45\1\156\2\11\1\1\1\11\2\127\2\20\1\11\1\1"+
    "\3\11\1\126\1\11\1\41\2\127\1\164\1\45\4\20\4\11\1\1\1\127\1\165\1\157\7\11"+
    "\1\157\3\11\1\163\1\106\2\11\1\45\1\154\4\20\1\166\1\11\1\127\17\11\1\167"+
    "\21\11\1\152\2\11\1\152\1\170\1\11\1\45\3\11\1\171\1\172\1\173\1\141\1\172"+
    "\1\165\1\20\1\174\1\42\1\70\1\175\1\142\1\176\1\20\1\141\2\11\1\20\1\141\1"+
    "\177\1\70\1\200\1\201\1\202\1\135\1\203\1\20\2\11\1\154\147\20\2\11\1\126"+
    "\2\11\1\126\10\11\1\204\1\157\2\11\1\144\3\11\1\27\1\42\1\11\1\205\4\206\2"+
    "\11\2\20\1\42\35\20\1\207\1\20\1\4\1\210\1\4\4\11\1\211\1\4\4\11\1\145\1\212"+
    "\1\11\1\126\1\4\4\11\1\126\1\20\1\11\1\32\3\20\1\11\40\20\133\11\1\64\4\20"+
    "\136\11\1\32\1\20\10\11\1\141\4\20\2\11\1\45\20\11\1\141\1\11\1\1\1\20\3\11"+
    "\1\213\7\11\1\16\1\20\1\214\1\215\5\11\1\216\1\11\1\126\1\163\3\20\1\214\2"+
    "\11\1\163\1\217\3\11\1\157\4\11\1\64\1\127\1\11\1\220\2\11\1\45\2\11\1\157"+
    "\1\11\1\141\4\11\1\221\1\127\1\11\1\126\3\11\1\205\1\45\1\127\1\11\1\120\4"+
    "\11\1\33\1\222\1\11\1\223\1\224\1\225\1\206\2\11\1\145\1\64\7\11\1\226\1\127"+
    "\72\11\1\157\1\11\1\227\2\11\1\1\20\20\26\11\1\45\6\11\1\127\2\20\1\205\1"+
    "\230\1\40\1\231\1\232\6\11\1\16\1\20\1\233\25\11\1\45\1\20\4\11\1\215\2\11"+
    "\1\163\2\20\1\141\1\11\1\20\1\11\1\234\1\235\1\20\1\103\1\142\7\11\1\41\1"+
    "\175\1\127\1\4\1\125\1\4\1\32\1\63\4\11\1\126\1\236\1\237\1\240\1\241\1\242"+
    "\1\11\1\14\1\243\2\45\2\20\7\11\1\32\4\20\3\11\1\156\7\20\1\244\10\20\1\11"+
    "\1\141\3\11\2\70\1\20\2\11\1\235\1\11\1\32\2\11\1\32\1\11\1\45\2\11\1\245"+
    "\1\246\2\20\11\11\1\45\1\127\2\11\1\245\1\11\1\1\2\11\1\163\3\11\1\157\11"+
    "\20\23\11\1\205\1\11\1\64\1\163\11\20\1\247\2\11\1\250\1\11\1\64\1\11\1\205"+
    "\1\11\1\126\4\20\1\11\1\251\1\11\1\64\1\11\1\127\4\20\3\11\1\252\4\20\1\253"+
    "\1\254\1\11\1\255\2\20\1\11\1\141\1\11\1\141\2\20\1\140\1\11\1\205\1\20\3"+
    "\11\1\64\1\11\1\64\1\11\1\33\1\11\1\16\6\20\4\11\1\154\3\20\3\11\1\33\3\11"+
    "\1\33\60\20\4\11\1\205\1\20\1\63\1\42\3\11\1\256\1\20\1\11\1\154\1\127\3\11"+
    "\1\142\1\20\2\11\1\257\4\11\1\260\1\35\2\20\1\11\1\23\1\11\1\261\4\20\1\262"+
    "\1\30\1\154\3\11\1\32\1\127\1\51\1\52\1\40\1\66\1\73\1\263\1\264\1\156\10"+
    "\20\4\11\1\32\1\127\2\20\4\11\1\265\1\127\12\20\3\11\1\266\1\70\1\267\2\20"+
    "\4\11\1\270\1\127\2\20\3\11\1\163\1\127\3\20\1\11\1\106\1\1\1\127\26\20\4"+
    "\11\1\127\1\42\20\20\3\11\1\126\1\164\3\11\1\50\1\127\2\20\3\11\1\154\20\20"+
    "\1\40\2\11\1\14\1\70\1\127\1\20\1\215\1\11\1\215\1\140\1\205\4\20\1\271\2"+
    "\11\1\272\1\163\1\127\52\20\71\11\1\127\6\20\6\11\1\126\1\20\14\11\1\157\53"+
    "\20\2\11\1\126\75\20\44\11\1\205\33\20\43\11\1\154\1\11\1\126\1\127\6\20\1"+
    "\11\1\45\1\156\3\11\1\205\1\157\1\127\1\233\1\273\1\11\67\20\4\11\1\156\2"+
    "\11\1\126\1\42\1\11\4\20\1\16\1\20\76\11\1\141\1\20\57\11\1\33\20\20\21\11"+
    "\1\126\5\20\30\11\1\1\20\20\6\11\1\32\1\141\1\154\1\274\1\157\113\20\1\275"+
    "\1\11\1\276\1\20\1\277\11\20\1\300\33\20\5\11\1\142\3\11\1\155\1\301\1\302"+
    "\1\303\3\11\1\304\1\305\1\11\1\306\1\307\1\105\24\11\1\266\1\11\1\105\1\145"+
    "\1\11\1\145\1\11\1\142\1\11\1\142\1\126\1\11\1\126\1\11\1\40\1\11\1\40\1\11"+
    "\1\310\3\11\40\20\3\11\1\227\2\11\1\141\1\311\1\175\1\165\1\4\25\20\1\14\1"+
    "\216\1\312\75\20\14\11\1\156\1\205\2\20\4\11\1\32\1\127\112\20\1\303\1\11"+
    "\1\313\1\314\1\315\1\316\1\317\1\320\1\167\1\1\1\321\1\1\24\20\55\11\1\205"+
    "\2\20\103\11\1\156\15\11\1\45\150\11\1\16\123\11\1\70\1\20\41\11\1\45\36\20"+
    "\1\75\1\20\6\11\10\20\17\11\41\20");

  /* The ZZ_CMAP_A table has 3360 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\15\1\3\1\2\2\1\1\2\16\15\4\0\1\36\1\0\1\10\1\0\1\15\2\0\1\11\1\17\1\20"+
    "\1\12\1\4\1\23\1\16\1\6\1\25\11\5\1\55\3\0\1\24\1\13\2\0\32\15\1\0\1\7\2\0"+
    "\1\15\1\0\1\34\1\54\1\33\1\26\1\27\1\32\1\42\1\45\1\21\1\15\1\51\1\46\1\43"+
    "\1\30\1\35\1\40\1\53\1\41\1\22\1\31\1\44\1\37\1\47\1\56\1\50\1\52\4\0\6\15"+
    "\1\14\32\15\2\0\4\15\4\0\1\15\2\0\1\15\7\0\1\15\4\0\1\15\5\0\7\15\1\0\12\15"+
    "\4\0\14\15\16\0\5\15\7\0\1\15\1\0\1\15\21\0\5\15\1\0\2\15\2\0\4\15\1\0\1\15"+
    "\6\0\1\15\1\0\3\15\1\0\1\15\1\0\4\15\1\0\23\15\1\0\13\15\1\0\5\15\2\0\15\15"+
    "\2\0\1\15\6\0\10\15\7\0\17\15\1\0\1\15\1\0\2\15\1\0\2\15\1\0\1\15\10\0\13"+
    "\15\5\0\3\15\15\0\6\15\5\0\1\15\4\0\13\15\1\0\1\15\3\0\12\15\4\0\6\15\1\0"+
    "\11\15\1\0\12\15\1\0\23\15\2\0\1\15\17\0\14\15\2\0\11\15\4\0\1\15\5\0\16\15"+
    "\2\0\5\15\1\0\10\15\6\0\20\15\2\0\16\15\1\0\10\15\2\0\2\15\2\0\16\15\1\0\1"+
    "\15\3\0\4\15\2\0\11\15\2\0\2\15\2\0\4\15\10\0\1\15\4\0\2\15\1\0\5\15\7\0\2"+
    "\15\4\0\3\15\1\0\6\15\4\0\2\15\1\0\2\15\1\0\2\15\1\0\2\15\2\0\1\15\1\0\5\15"+
    "\4\0\2\15\2\0\3\15\3\0\1\15\7\0\4\15\1\0\1\15\7\0\20\15\13\0\3\15\1\0\11\15"+
    "\1\0\2\15\1\0\2\15\1\0\5\15\2\0\12\15\1\0\3\15\1\0\3\15\2\0\1\15\20\0\1\15"+
    "\7\0\7\15\1\0\3\15\1\0\10\15\2\0\6\15\2\0\2\15\2\0\3\15\10\0\2\15\4\0\2\15"+
    "\1\0\1\15\1\0\1\15\20\0\2\15\1\0\6\15\3\0\3\15\1\0\4\15\3\0\2\15\1\0\1\15"+
    "\1\0\2\15\3\0\2\15\3\0\3\15\3\0\5\15\3\0\3\15\1\0\4\15\2\0\1\15\6\0\1\15\21"+
    "\0\1\15\6\0\4\15\1\0\10\15\1\0\3\15\1\0\30\15\3\0\10\15\1\0\3\15\1\0\4\15"+
    "\7\0\2\15\1\0\3\15\5\0\4\15\1\0\5\15\2\0\4\15\5\0\2\15\7\0\1\15\2\0\2\15\15"+
    "\0\5\15\1\0\3\15\1\0\5\15\5\0\4\15\7\0\1\15\12\0\6\15\2\0\2\15\1\0\22\15\3"+
    "\0\10\15\1\0\11\15\1\0\1\15\2\0\7\15\3\0\1\15\4\0\6\15\1\0\1\15\1\0\10\15"+
    "\2\0\2\15\14\0\13\15\4\0\20\15\1\0\12\15\7\0\2\15\1\0\1\15\2\0\2\15\1\0\1"+
    "\15\2\0\1\15\6\0\4\15\1\0\7\15\1\0\3\15\1\0\1\15\1\0\1\15\2\0\2\15\1\0\15"+
    "\15\1\0\3\15\2\0\5\15\1\0\1\15\1\0\6\15\2\0\12\15\2\0\4\15\10\0\2\15\13\0"+
    "\1\15\1\0\1\15\1\0\1\15\4\0\12\15\1\0\24\15\3\0\5\15\1\0\12\15\6\0\1\15\11"+
    "\0\6\15\1\0\1\15\5\0\1\15\2\0\13\15\1\0\15\15\1\0\4\15\2\0\7\15\1\0\1\15\1"+
    "\0\4\15\2\0\1\15\1\0\4\15\2\0\7\15\1\0\1\15\1\0\4\15\2\0\16\15\2\0\6\15\2"+
    "\0\13\15\3\0\13\15\7\0\15\15\1\0\7\15\13\0\4\15\14\0\1\15\1\0\2\15\14\0\4"+
    "\15\3\0\1\15\3\0\3\15\15\0\4\15\1\0\10\15\17\0\1\15\23\0\10\15\1\0\26\15\1"+
    "\0\15\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\6\15\1\0\7\15\1\0\1\15\3\0\3\15\1"+
    "\0\7\15\3\0\4\15\2\0\6\15\14\0\2\1\5\15\5\0\1\15\14\0\1\15\15\0\1\15\1\0\1"+
    "\15\3\0\13\15\2\0\1\15\4\0\1\15\2\0\12\15\1\0\1\15\3\0\5\15\6\0\1\15\1\0\1"+
    "\15\1\0\1\15\1\0\4\15\1\0\1\15\5\0\5\15\4\0\1\15\1\0\5\15\6\0\14\15\11\0\7"+
    "\15\1\0\7\15\6\0\3\15\11\0\5\15\2\0\5\15\3\0\7\15\2\0\2\15\2\0\3\15\5\0\13"+
    "\15\4\0\12\15\1\0\1\15\7\0\11\15\2\0\27\15\2\0\5\15\10\0\1\15\7\0\10\15\3"+
    "\0\1\15\1\0\1\15\2\0\1\15\16\0\1\15\13\0\3\15\4\0\5\15\12\0\6\15\2\0\6\15"+
    "\2\0\6\15\11\0\13\15\1\0\2\15\2\0\7\15\4\0\5\15\3\0\5\15\5\0\12\15\1\0\5\15"+
    "\1\0\1\15\1\0\2\15\1\0\2\15\1\0\12\15\3\0\15\15\3\0\2\15\30\0\3\15\2\0\6\15"+
    "\2\0\6\15\2\0\6\15\2\0\3\15\3\0\2\15\3\0\2\15\22\0\3\15\4\0\14\15\1\0\16\15"+
    "\1\0\2\15\1\0\1\15\15\0\1\15\2\0\4\15\4\0\10\15\1\0\5\15\12\0\6\15\2\0\1\15"+
    "\1\0\14\15\1\0\2\15\3\0\1\15\2\0\4\15\1\0\2\15\12\0\10\15\6\0\6\15\1\0\2\15"+
    "\5\0\10\15\1\0\3\15\1\0\13\15\4\0\3\15\4\0\14\15\2\0\1\15\2\0\4\15\2\0\1\15"+
    "\11\0\5\15\5\0\3\15\3\0\10\15\6\0\1\15\1\0\7\15\1\0\1\15\1\0\4\15\1\0\2\15"+
    "\6\0\1\15\5\0\7\15\2\0\7\15\3\0\6\15\1\0\1\15\10\0\6\15\2\0\10\15\10\0\6\15"+
    "\2\0\1\15\3\0\1\15\13\0\7\15\1\0\2\15\1\0\14\15\3\0\1\15\1\0\2\15\1\0\11\15"+
    "\5\0\15\15\3\0\2\15\6\0\5\15\3\0\6\15\2\0\7\15\16\0\4\15\4\0\3\15\15\0\1\15"+
    "\2\0\2\15\2\0\4\15\1\0\14\15\1\0\1\15\1\0\7\15\1\0\21\15\1\0\4\15\2\0\10\15"+
    "\1\0\7\15\1\0\14\15\1\0\4\15\1\0\5\15\1\0\1\15\3\0\11\15\1\0\10\15\2\0\2\15"+
    "\5\0\1\15\12\0\2\15\1\0\2\15\1\0\5\15\6\0\2\15\1\0\1\15\2\0\1\15\1\0\12\15"+
    "\1\0\4\15\1\0\1\15\1\0\1\15\6\0\1\15\4\0\1\15\1\0\1\15\1\0\1\15\1\0\3\15\1"+
    "\0\2\15\1\0\1\15\2\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\2\15\1\0"+
    "\1\15\2\0\4\15\1\0\7\15\1\0\4\15\1\0\4\15\1\0\1\15\2\0\3\15\1\0\5\15\1\0\5"+
    "\15");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\2\1\1\1\7\1\10\1\11\2\1\1\12\1\13"+
    "\1\14\26\1\1\4\1\15\2\1\1\16\1\1\1\17"+
    "\1\20\1\4\1\0\1\21\2\0\1\22\1\0\1\22"+
    "\1\23\1\24\1\25\1\21\1\26\10\21\1\27\11\21"+
    "\1\30\17\21\1\31\1\25\1\32\1\0\1\33\1\34"+
    "\4\21\1\35\6\21\1\36\1\37\13\21\1\40\3\21"+
    "\1\41\1\21\1\42\21\21\1\0\3\21\1\43\5\21"+
    "\1\44\1\45\1\0\2\21\1\46\1\47\1\50\1\21"+
    "\1\51\1\52\1\53\1\54\1\55\15\21\1\56\5\21"+
    "\1\0\2\21\1\57\1\21\1\0\4\21\1\60\3\21"+
    "\2\0\3\21\1\46\6\21\1\61\11\21\1\62\1\0"+
    "\6\21\1\57\1\21\1\63\1\64\4\21\1\60\2\21"+
    "\1\65\2\21\1\0\6\21\1\66\1\67\2\21\1\61"+
    "\7\21\1\70\3\21\1\0\4\21\1\63\5\21\1\71"+
    "\2\21\2\0\1\21\1\72\1\21\1\73\2\21\1\42"+
    "\1\21\1\74\1\21\1\75\10\21\1\76\4\21\1\77"+
    "\1\100\2\21\1\0\6\21\1\0\3\21\1\101\1\21"+
    "\1\0\2\21\1\0\1\102\5\21\1\0\7\21\1\103"+
    "\1\104\1\105\1\21\1\0\1\21\1\106\2\21\1\107"+
    "\3\21\1\0\4\21\1\110\1\0\1\111\1\112\1\0"+
    "\1\21\1\106\5\21\1\0\1\113\3\21\1\0\1\112"+
    "\1\0\3\21\1\114\1\21\1\115\2\0\1\21\1\116"+
    "\2\0\3\21\1\117\1\120\1\0\1\121\2\0\3\21"+
    "\4\0\1\21\3\0\1\122\1\0\1\21\14\0\1\123"+
    "\7\0\1\124\3\0\1\125\3\0\1\126\1\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[453];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\136\0\u011a"+
    "\0\u0149\0\u0178\0\u01a7\0\u01d6\0\274\0\136\0\136\0\u0205"+
    "\0\u0234\0\136\0\136\0\136\0\u0263\0\u0292\0\u02c1\0\u02f0"+
    "\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\u0439\0\u0468"+
    "\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0"+
    "\0\u060f\0\u063e\0\u063e\0\136\0\u066d\0\u069c\0\136\0\u06cb"+
    "\0\u063e\0\136\0\u06fa\0\u0729\0\u01d6\0\u01d6\0\u011a\0\136"+
    "\0\u0149\0\u0149\0\136\0\u0758\0\u01d6\0\u0787\0\u07b6\0\u07e5"+
    "\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u01d6"+
    "\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6"+
    "\0\u0ad5\0\u01d6\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef"+
    "\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67"+
    "\0\u0d96\0\u01d6\0\136\0\136\0\u0dc5\0\136\0\u0729\0\u0df4"+
    "\0\u0e23\0\u0e52\0\u0e81\0\u01d6\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d"+
    "\0\u0f6c\0\u0f9b\0\u0fca\0\u01d6\0\u0ff9\0\u1028\0\u1057\0\u1086"+
    "\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u01d6"+
    "\0\u11fe\0\u122d\0\u125c\0\u01d6\0\u128b\0\u12ba\0\u12e9\0\u1318"+
    "\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490"+
    "\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608"+
    "\0\u1637\0\u1666\0\u1695\0\u01d6\0\u16c4\0\u16f3\0\u1722\0\u1751"+
    "\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a\0\u01d6"+
    "\0\u01d6\0\u18c9\0\u01d6\0\u01d6\0\u01d6\0\u01d6\0\u18f8\0\u1927"+
    "\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f"+
    "\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u01d6\0\u1b8a\0\u1bb9\0\u1be8"+
    "\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31\0\u1d60"+
    "\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8"+
    "\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u01d6\0\u1ff2\0\u2021"+
    "\0\u2050\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b\0\u216a\0\u2199"+
    "\0\u21c8\0\u21f7\0\u2226\0\u2255\0\u2284\0\u22b3\0\u01d6\0\u22e2"+
    "\0\u2311\0\u2340\0\u236f\0\u239e\0\u23cd\0\u23fc\0\u01d6\0\u242b"+
    "\0\u245a\0\136\0\u2489\0\u24b8\0\u24e7\0\u2516\0\u01d6\0\u2545"+
    "\0\u2574\0\u01d6\0\u25a3\0\u25d2\0\u2601\0\u2630\0\u265f\0\u268e"+
    "\0\u26bd\0\u26ec\0\u271b\0\u01d6\0\u01d6\0\u274a\0\u2779\0\u01d6"+
    "\0\u27a8\0\u27d7\0\u2806\0\u2835\0\u2864\0\u2893\0\u28c2\0\u01d6"+
    "\0\u28f1\0\u2920\0\u294f\0\u297e\0\u29ad\0\u29dc\0\u2a0b\0\u2a3a"+
    "\0\u01d6\0\u2a69\0\u2a98\0\u2ac7\0\u2af6\0\u2b25\0\u01d6\0\u2b54"+
    "\0\u2b83\0\u2bb2\0\u2be1\0\u2c10\0\u01d6\0\u2c3f\0\u01d6\0\u2c6e"+
    "\0\u2c9d\0\u01d6\0\u2ccc\0\u2cfb\0\u2d2a\0\u01d6\0\u2d59\0\u2d88"+
    "\0\u2db7\0\u2de6\0\u2e15\0\u2e44\0\u2e73\0\u2ea2\0\u01d6\0\u2ed1"+
    "\0\u2f00\0\u2f2f\0\u2f5e\0\u01d6\0\u01d6\0\u2f8d\0\u2fbc\0\u2feb"+
    "\0\u301a\0\u3049\0\u3078\0\u30a7\0\u30d6\0\u3105\0\u3134\0\u3163"+
    "\0\u3192\0\u31c1\0\u01d6\0\u31f0\0\u321f\0\u324e\0\u327d\0\u32ac"+
    "\0\u01d6\0\u32db\0\u330a\0\u3339\0\u3368\0\u3397\0\u33c6\0\u33f5"+
    "\0\u3424\0\u3453\0\u3482\0\u34b1\0\u34e0\0\u350f\0\u01d6\0\u01d6"+
    "\0\u01d6\0\u353e\0\u356d\0\u359c\0\u35cb\0\u35fa\0\u3629\0\u01d6"+
    "\0\u3658\0\u3687\0\u36b6\0\u36e5\0\u3714\0\u3743\0\u3772\0\u37a1"+
    "\0\u01d6\0\u37d0\0\u01d6\0\u37ff\0\u382e\0\u385d\0\u01d6\0\u388c"+
    "\0\u38bb\0\u38ea\0\u3919\0\u3948\0\u3977\0\u01d6\0\u39a6\0\u39d5"+
    "\0\u3a04\0\u3a33\0\u01d6\0\u3a62\0\u3a91\0\u3ac0\0\u3aef\0\u01d6"+
    "\0\u3b1e\0\u01d6\0\u3b4d\0\u3b7c\0\u3bab\0\u01d6\0\u3bda\0\u3c09"+
    "\0\u3c38\0\u3c67\0\u3c96\0\u01d6\0\136\0\u3cc5\0\u01d6\0\u3cf4"+
    "\0\u3d23\0\u3d52\0\u3d81\0\u3db0\0\u3ddf\0\u3e0e\0\u3e3d\0\u3e6c"+
    "\0\u3e9b\0\u3eca\0\u3ef9\0\u3f28\0\136\0\u3f57\0\u3f86\0\u3fb5"+
    "\0\u3fe4\0\u4013\0\u4042\0\u4071\0\u40a0\0\u40cf\0\u40fe\0\u412d"+
    "\0\u415c\0\u418b\0\u41ba\0\136\0\u41e9\0\u4218\0\u4247\0\u4276"+
    "\0\u42a5\0\u42d4\0\u4303\0\136\0\u4332\0\u4361\0\u4390\0\136"+
    "\0\u43bf\0\u43ee\0\u441d\0\136\0\136";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[453];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\12\1\3\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\4\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\14"+
    "\1\47\1\50\1\51\1\6\1\14\1\3\3\4\1\52"+
    "\1\53\1\54\5\3\1\4\1\3\1\52\1\16\1\17"+
    "\1\55\1\56\11\3\1\57\1\3\1\4\1\60\15\3"+
    "\1\61\1\62\60\0\3\4\10\0\1\4\21\0\1\4"+
    "\25\0\1\63\47\0\1\63\6\0\1\6\1\64\5\0"+
    "\2\65\1\66\2\0\2\65\3\0\10\65\1\0\16\65"+
    "\1\6\1\65\2\67\1\0\4\67\1\0\1\70\46\67"+
    "\2\71\1\0\4\71\2\0\1\72\45\71\12\0\1\73"+
    "\1\74\44\0\3\4\1\0\1\65\6\0\1\13\1\65"+
    "\1\66\2\0\2\65\3\0\10\65\1\4\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\10\65"+
    "\1\0\20\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\1\65\1\75\3\0\1\76\1\65\1\77\5\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\1\65\1\100\6\65\1\0\1\65\1\101\3\65"+
    "\1\102\12\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\1\103\1\65\3\0\6\65\1\104\1\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\2\65\1\105\5\65\1\0\20\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\10\65\1\0\5\65"+
    "\1\106\12\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\1\107\1\65\3\0\7\65\1\110\1\0\2\65\1\111"+
    "\3\65\1\112\11\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\10\65\1\0\2\65\1\113\15\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\6\65\1\114\1\115\1\0\20\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\1\116\4\65\1\117"+
    "\2\65\1\0\5\65\1\120\1\65\1\121\10\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\4\65"+
    "\1\122\3\65\1\0\20\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\6\65\1\123\1\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\1\124"+
    "\1\65\3\0\10\65\1\0\2\65\1\125\15\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\1\65"+
    "\1\126\6\65\1\0\20\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\1\127\1\65\3\0\10\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\7\65\1\130\1\0\5\65\1\131\12\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\1\65\1\132\3\0\10\65"+
    "\1\0\20\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\1\133\1\65\3\0\10\65\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\1\134\1\65\3\0\7\65"+
    "\1\135\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\7\65\1\136\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\10\65"+
    "\1\0\11\65\1\137\6\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\1\65\1\140\6\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\10\65\1\0\5\65\1\141\12\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\10\65\1\0"+
    "\11\65\1\142\6\65\5\0\1\53\47\0\1\53\23\0"+
    "\1\143\111\0\1\144\35\0\1\145\20\0\1\146\6\0"+
    "\1\63\1\64\46\0\1\63\6\0\1\147\47\0\1\147"+
    "\1\0\1\74\2\0\11\74\1\0\42\74\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\1\65\1\150"+
    "\6\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\1\151\1\152\3\0\3\65\1\153\4\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\3\65\1\154\1\65\1\155\2\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\6\65\1\156\1\65\1\0\20\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\10\65\1\0\15\65"+
    "\1\157\2\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\1\65\1\160\3\0\10\65\1\0\1\161\17\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\3\65"+
    "\1\162\4\65\1\0\11\65\1\163\6\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\1\164\7\65"+
    "\1\0\1\165\17\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\10\65\1\0\4\65\1\166\2\65"+
    "\1\167\10\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\10\65\1\0\4\65\1\170\13\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\10\65"+
    "\1\0\5\65\1\171\12\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\10\65\1\0\2\65\1\172"+
    "\15\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\7\65\1\173\1\0\20\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\10\65\1\0\7\65"+
    "\1\174\10\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\10\65\1\0\1\65\1\175\1\176\1\65"+
    "\1\177\13\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\1\200\7\65\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\5\65\1\201"+
    "\2\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\3\65\1\202\4\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\10\65\1\0\1\65\1\203\5\65\1\204\10\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\10\65"+
    "\1\0\7\65\1\205\10\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\5\65\1\206\2\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\7\65\1\207\1\0\20\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\1\210\1\65\1\211"+
    "\5\65\1\0\1\65\1\212\2\65\1\213\13\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\10\65"+
    "\1\0\1\214\17\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\10\65\1\0\1\215\17\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\10\65"+
    "\1\0\7\65\1\216\10\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\1\217\1\65\3\0\10\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\10\65\1\0\3\65\1\220\14\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\2\65\1\221\5\65"+
    "\1\0\20\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\5\65\1\222\2\65\1\0\10\65\1\223"+
    "\7\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\10\65\1\0\2\65\1\224\15\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\10\65\1\0"+
    "\11\65\1\225\6\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\10\65\1\0\2\65\1\226\15\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\7\65\1\227\1\0\20\65\46\0\1\230\15\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\2\65\1\231"+
    "\5\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\3\65\1\232\4\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\3\65\1\233\4\65\1\0\20\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\7\65\1\234\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\10\65\1\0\5\65\1\235\12\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\5\65\1\236"+
    "\2\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\3\65\1\237\4\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\10\65\1\0\1\65\1\240\16\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\1\241\1\65\3\0\10\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\1\65\1\242\4\65\1\243\1\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\244\2\0\2\65\3\0"+
    "\10\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\1\245\1\65\3\0\10\65\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\1\65"+
    "\1\246\6\65\1\0\20\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\10\65\1\0\7\65\1\247"+
    "\10\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\1\65\1\250\6\65\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\1\65\1\251"+
    "\6\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\7\65\1\252\1\0\5\65\1\253"+
    "\12\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\10\65\1\0\4\65\1\254\13\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\10\65\1\0"+
    "\7\65\1\255\10\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\10\65\1\0\11\65\1\256\6\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\10\65\1\0\2\65\1\257\15\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\10\65\1\0\1\65"+
    "\1\260\16\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\1\65\1\261\6\65\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\10\65"+
    "\1\0\6\65\1\262\11\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\10\65\1\0\6\65\1\263"+
    "\11\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\10\65\1\0\5\65\1\264\12\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\3\65\1\265"+
    "\4\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\5\65\1\266\2\65\1\0\3\65"+
    "\1\267\14\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\1\65\1\270\6\65\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\6\65"+
    "\1\271\1\65\1\0\20\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\10\65\1\0\7\65\1\272"+
    "\10\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\6\65\1\273\1\65\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\1\274\1\65\3\0\10\65"+
    "\1\0\20\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\1\65\1\275\6\65\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\3\65"+
    "\1\276\4\65\1\0\20\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\2\65\1\277\5\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\10\65\1\0\6\65\1\300\11\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\10\65\1\0"+
    "\12\65\1\301\5\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\6\65\1\302\1\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\303\2\0\2\65\3\0"+
    "\10\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\10\65\1\0\12\65\1\304\5\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\10\65\1\0\11\65\1\305\6\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\7\65\1\306\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\3\65\1\307\4\65\1\0\20\65\44\0\1\310"+
    "\17\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\3\65\1\311\4\65\1\0\20\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\1\312\1\65\3\0\10\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\6\65\1\313\1\65\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\10\65\1\0"+
    "\2\65\1\314\15\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\1\65\1\315\6\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\10\65\1\0\2\65\1\316\15\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\10\65\1\0\7\65"+
    "\1\317\10\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\1\320\7\65\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\321\2\0\2\65\3\0\10\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\10\65\1\322\20\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\7\65\1\323\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\10\65\1\0\2\65\1\324\15\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\10\65\1\0\2\65"+
    "\1\325\15\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\1\65\1\326\3\0\10\65\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\10\65\1\0"+
    "\5\65\1\327\12\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\1\65\1\330\6\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\10\65\1\0\5\65\1\331\12\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\10\65\1\0\1\65"+
    "\1\332\16\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\7\65\1\333\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\6\65\1\334"+
    "\1\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\1\65\1\335\6\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\10\65\1\0\5\65\1\336\12\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\1\65\1\337\6\65"+
    "\1\0\20\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\10\65\1\0\2\65\1\340\15\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\4\65"+
    "\1\341\3\65\1\0\20\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\10\65\1\0\4\65\1\342"+
    "\13\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\6\65\1\343\1\65\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\1\344\1\65\3\0\10\65"+
    "\1\0\20\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\2\65\1\345\5\65\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\1\346\1\65\3\0"+
    "\10\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\10\65\1\0\3\65\1\347\14\65"+
    "\5\0\1\65\6\0\2\65\1\350\2\0\2\65\3\0"+
    "\10\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\6\65\1\351\1\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\10\65\1\0\7\65\1\352\10\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\10\65\1\0\1\353"+
    "\17\65\5\0\1\65\6\0\2\65\1\66\2\0\1\354"+
    "\1\65\3\0\10\65\1\0\20\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\1\355\7\65\1\0"+
    "\4\65\1\356\13\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\1\65\1\357\3\0\1\65\1\360\6\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\1\65\1\361\6\65\1\0\20\65\27\0\1\362"+
    "\34\0\1\65\6\0\2\65\1\66\2\0\1\363\1\65"+
    "\3\0\10\65\1\0\20\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\6\65\1\364\1\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\10\65\1\0\7\65\1\365\10\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\1\366\1\65\3\0\10\65"+
    "\1\0\20\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\1\65\1\367\3\0\10\65\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\6\65\1\370"+
    "\1\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\6\65\1\371\1\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\1\65\1\372\6\65\1\0\20\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\5\65\1\373\2\65"+
    "\1\0\10\65\1\374\7\65\26\0\1\375\35\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\4\65\1\376"+
    "\3\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\7\65\1\377\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\1\u0100\1\65\3\0"+
    "\10\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\10\65\1\0\3\65\1\u0101\14\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\1\65\1\u0102"+
    "\3\0\10\65\1\0\20\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\3\65\1\u0103\4\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\3\65\1\u0104\4\65\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\10\65\1\0"+
    "\2\65\1\u0105\15\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\2\65\1\u0106\5\65\1\0\15\65"+
    "\1\u0107\2\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\1\65\1\u0108\3\0\10\65\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\10\65\1\0"+
    "\2\65\1\u0109\15\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\1\u010a\7\65\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\6\65"+
    "\1\u010b\1\65\1\0\20\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\1\u010c\1\65\3\0\10\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\1\65\1\u010d\6\65\1\0\20\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\5\65\1\u010e\2\65"+
    "\1\0\20\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\2\65\1\u010f\5\65\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\10\65"+
    "\1\0\3\65\1\u0110\14\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\10\65\1\0\1\65\1\u0111"+
    "\16\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\10\65\1\0\1\u0112\17\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\10\65\1\0\3\65"+
    "\1\u0113\14\65\5\0\1\65\6\0\2\65\1\u0114\2\0"+
    "\2\65\3\0\10\65\1\0\20\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\6\65\1\u0115\1\65"+
    "\1\0\20\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\2\65\1\u0116\5\65\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\1\u0117"+
    "\7\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\10\65\1\0\4\65\1\u0118\13\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\1\65\1\357"+
    "\3\0\10\65\1\0\20\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\1\65\1\u0119\3\0\10\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\4\65\1\u011a\3\65\1\0\20\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\10\65\1\0\7\65"+
    "\1\u011b\10\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\10\65\1\0\7\65\1\u011c\10\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\3\65"+
    "\1\u011d\4\65\1\0\20\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\5\65\1\u011e\2\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\10\65\1\0\11\65\1\u011f\6\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\7\65\1\u0120"+
    "\1\0\20\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\10\65\1\0\2\65\1\u0121\15\65\21\0"+
    "\1\u0122\42\0\1\65\6\0\2\65\1\u0123\2\0\2\65"+
    "\3\0\10\65\1\0\20\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\2\65\1\u0124\5\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\5\65\1\u0125\2\65\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\10\65\1\0"+
    "\6\65\1\253\11\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\10\65\1\0\1\65\1\u0126\16\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\1\65\1\u0127\6\65\1\0\20\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\10\65\1\0\5\65"+
    "\1\u0128\12\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\1\65\1\u0129\6\65\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\1\65"+
    "\1\u012a\6\65\1\0\20\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\10\65\1\0\5\65\1\u012b"+
    "\12\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\10\65\1\0\4\65\1\u012c\13\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\2\65\1\u012d"+
    "\5\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\1\65\1\u012e\3\0\10\65\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\1\u012f\1\65\3\0"+
    "\10\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\1\u0130\7\65\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\10\65"+
    "\1\0\7\65\1\u0131\10\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\6\65\1\u0132\1\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\1\65\1\u0133\6\65\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\1\65\1\u0134\3\0\10\65"+
    "\1\0\20\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\10\65\1\0\7\65\1\u0135\10\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\10\65"+
    "\1\0\3\65\1\u0136\14\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\1\u0137\7\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\1\u0138\7\65\1\0\20\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\1\u0139\1\65\3\0\10\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\1\u013a\1\65"+
    "\3\0\10\65\1\0\20\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\6\65\1\u013b\1\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\10\65\1\0\11\65\1\u013c\6\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\3\65\1\u013d"+
    "\4\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\10\65\1\0\4\65\1\u013e\13\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\1\u013f\1\65"+
    "\3\0\10\65\1\0\20\65\37\0\1\u0140\24\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\10\65\1\0"+
    "\10\65\1\u0141\7\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\10\65\1\0\4\65\1\u0142\13\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\7\65\1\u0143\1\0\20\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\10\65\1\0\4\65\1\u0144"+
    "\13\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\3\65\1\u0145\4\65\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\10\65\1\0"+
    "\2\65\1\u0146\15\65\5\0\1\65\6\0\2\65\1\u0147"+
    "\2\0\2\65\3\0\10\65\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\1\65\1\u0148"+
    "\6\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\2\65\1\u0149\5\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\1\65\1\u014a\6\65\1\0\20\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\10\65\1\0\11\65"+
    "\1\u014b\6\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\10\65\1\0\7\65\1\u014c\10\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\10\65"+
    "\1\u014d\20\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\3\65\1\u014e\4\65\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\10\65"+
    "\1\0\5\65\1\u014f\12\65\5\0\1\65\6\0\2\65"+
    "\1\u0150\2\0\2\65\3\0\10\65\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\1\u0151"+
    "\7\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\5\65\1\u0152\2\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\10\65\1\0\13\65\1\u0153\4\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\3\65\1\u0154\4\65"+
    "\1\0\20\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\10\65\1\0\1\65\1\u0155\16\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\3\65"+
    "\1\u0156\4\65\1\0\20\65\21\0\1\u0157\42\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\1\65\1\u0158"+
    "\6\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\1\65\1\u0159\6\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\2\65\1\u015a\5\65\1\0\20\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\1\65\1\u015b\6\65"+
    "\1\0\20\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\1\u015c\1\65\3\0\10\65\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\1\65\1\u015d"+
    "\6\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\1\u015e\1\65\3\0\10\65\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\1\65\1\u015f\3\0"+
    "\10\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\10\65\1\0\3\65\1\u0160\14\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\10\65\1\0\2\65\1\u0161\15\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\10\65\1\0\5\65"+
    "\1\u0162\12\65\22\0\1\u0163\41\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\7\65\1\u0164\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\1\65\1\u0165\6\65\1\0\20\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\1\65\1\u0166\3\0\10\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\6\65\1\u0167\1\65\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\1\65\1\u0168"+
    "\6\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\1\u0169\1\65\3\0\10\65\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\1\u016a\1\65\3\0"+
    "\10\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\3\65\1\u016b\4\65\1\0\20\65"+
    "\22\0\1\u016c\41\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\1\65\1\u016d\6\65\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\2\65"+
    "\1\u016e\5\65\1\0\20\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\1\u016f\7\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\10\65\1\0\2\65\1\u0170\15\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\5\65\1\u0171\2\65"+
    "\1\0\20\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\10\65\1\u0172\20\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\1\u0173\7\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\1\65\1\u0174\6\65\1\0\20\65\27\0\1\u0175"+
    "\34\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\10\65\1\0\2\65\1\u0176\15\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\1\65\1\u0177\3\0\10\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\3\65\1\u0178\4\65\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\3\65\1\u0179"+
    "\4\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\7\65\1\u017a\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\10\65"+
    "\1\0\7\65\1\u017b\10\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\1\65\1\u017c\6\65\1\0"+
    "\20\65\21\0\1\u017d\42\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\10\65\1\0\12\65\1\u017e\5\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\3\65\1\u017f\4\65\1\0\20\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\1\u0180\1\65\3\0\10\65\1\0"+
    "\20\65\5\0\1\65\6\0\2\65\1\66\2\0\1\u0181"+
    "\1\65\3\0\10\65\1\0\20\65\26\0\1\u0182\35\0"+
    "\1\65\6\0\2\65\1\66\2\0\1\65\1\u0183\3\0"+
    "\10\65\1\0\20\65\33\0\1\u0184\30\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\6\65\1\u0185\1\65"+
    "\1\0\20\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\7\65\1\u0186\1\0\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\1\u0187\1\65\3\0\10\65"+
    "\1\0\20\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\2\65\1\u0188\5\65\1\0\20\65\5\0"+
    "\1\65\6\0\2\65\1\66\2\0\2\65\3\0\1\65"+
    "\1\u0189\6\65\1\0\20\65\5\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\2\65\1\u018a\5\65\1\0"+
    "\20\65\35\0\1\u018b\26\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\10\65\1\u018c\20\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\2\65\1\u018d"+
    "\5\65\1\0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\5\65\1\u018e\2\65\1\0\20\65"+
    "\21\0\1\u018f\66\0\1\u0190\32\0\1\65\6\0\2\65"+
    "\1\66\2\0\2\65\3\0\10\65\1\0\3\65\1\u0191"+
    "\14\65\5\0\1\65\6\0\2\65\1\66\2\0\2\65"+
    "\3\0\10\65\1\0\2\65\1\u0192\15\65\5\0\1\65"+
    "\6\0\2\65\1\66\2\0\2\65\3\0\7\65\1\u0193"+
    "\1\0\20\65\5\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\1\u0194\7\65\1\0\20\65\30\0\1\u0195"+
    "\54\0\1\u0196\35\0\1\65\6\0\2\65\1\66\2\0"+
    "\2\65\3\0\10\65\1\0\3\65\1\u0197\14\65\37\0"+
    "\1\u0198\40\0\1\u0199\42\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\1\65\1\u019a\6\65\1\0\20\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\6\65\1\u019b\1\65\1\0\20\65\5\0\1\65\6\0"+
    "\2\65\1\66\2\0\2\65\3\0\2\65\1\u019c\5\65"+
    "\1\0\20\65\21\0\1\u019d\56\0\1\u019e\72\0\1\u019f"+
    "\26\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\10\65\1\u01a0\20\65\5\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\10\65\1\0\3\65\1\u01a1\14\65"+
    "\5\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\10\65\1\u01a2\20\65\37\0\1\u01a3\41\0\1\u01a4\64\0"+
    "\1\u01a5\50\0\1\u01a6\41\0\1\65\6\0\2\65\1\66"+
    "\2\0\2\65\3\0\1\65\1\u01a7\6\65\1\0\20\65"+
    "\26\0\1\u01a8\51\0\1\u01a9\56\0\1\u01aa\64\0\1\u01ab"+
    "\34\0\1\65\6\0\2\65\1\66\2\0\2\65\3\0"+
    "\10\65\1\u01ac\20\65\21\0\1\u01ad\57\0\1\u01ae\71\0"+
    "\1\u01af\54\0\1\u01b0\45\0\1\u01b1\73\0\1\u01b2\40\0"+
    "\1\u01b3\65\0\1\u01b4\57\0\1\u01b5\54\0\1\u01b6\50\0"+
    "\1\u01b7\72\0\1\u01b8\42\0\1\u01b9\70\0\1\u01ba\45\0"+
    "\1\u01bb\64\0\1\u01bc\63\0\1\u01bd\52\0\1\u01be\46\0"+
    "\1\u01bf\65\0\1\u01c0\47\0\1\u01c1\72\0\1\u01c2\56\0"+
    "\1\u01c3\51\0\1\u01c4\56\0\1\u01c5\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17484];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\6\1\2\11\2\1\3\11"+
    "\27\1\1\11\2\1\1\11\2\1\1\11\1\1\1\0"+
    "\1\1\2\0\1\11\1\0\1\1\1\11\47\1\2\11"+
    "\1\0\1\11\61\1\1\0\13\1\1\0\36\1\1\0"+
    "\4\1\1\0\10\1\2\0\25\1\1\0\11\1\1\11"+
    "\12\1\1\0\26\1\1\0\15\1\2\0\34\1\1\0"+
    "\6\1\1\0\5\1\1\0\2\1\1\0\6\1\1\0"+
    "\13\1\1\0\10\1\1\0\5\1\1\0\2\1\1\0"+
    "\7\1\1\0\4\1\1\0\1\1\1\0\6\1\2\0"+
    "\2\1\2\0\4\1\1\11\1\0\1\1\2\0\3\1"+
    "\4\0\1\1\3\0\1\11\1\0\1\1\14\0\1\11"+
    "\7\0\1\11\3\0\1\11\3\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[453];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CobolLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 88: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 89: break;
          case 3: 
            { return CobolTypes.ADD_OP;
            } 
            // fall through
          case 90: break;
          case 4: 
            { return CobolTypes.INTEGER;
            } 
            // fall through
          case 91: break;
          case 5: 
            { return CobolTypes.DOT;
            } 
            // fall through
          case 92: break;
          case 6: 
            { return CobolTypes.MULTIPLY_OP;
            } 
            // fall through
          case 93: break;
          case 7: 
            { return CobolTypes.SUBTRACT_OP;
            } 
            // fall through
          case 94: break;
          case 8: 
            { return CobolTypes.PAREN_OPEN;
            } 
            // fall through
          case 95: break;
          case 9: 
            { return CobolTypes.PAREN_CLOSE;
            } 
            // fall through
          case 96: break;
          case 10: 
            { return CobolTypes.COMMA;
            } 
            // fall through
          case 97: break;
          case 11: 
            { return CobolTypes.EQUALS_OP;
            } 
            // fall through
          case 98: break;
          case 12: 
            { return CobolTypes.DIVIDE_OP;
            } 
            // fall through
          case 99: break;
          case 13: 
            { yybegin(YYINITIAL); return CobolTypes.DOT;
            } 
            // fall through
          case 100: break;
          case 14: 
            { return CobolTypes.PIC_TYPE_ALPHA;
            } 
            // fall through
          case 101: break;
          case 15: 
            { return CobolTypes.PIC_TYPE_NUMERIC;
            } 
            // fall through
          case 102: break;
          case 16: 
            { return CobolTypes.PIC_TYPE_ALPHANUMERIC;
            } 
            // fall through
          case 103: break;
          case 17: 
            { return CobolTypes.IDENTIFIER;
            } 
            // fall through
          case 104: break;
          case 18: 
            { return CobolTypes.STRING;
            } 
            // fall through
          case 105: break;
          case 19: 
            { return CobolTypes.POWER_OP ;
            } 
            // fall through
          case 106: break;
          case 20: 
            { return CobolParserDefinition.COMMENT;
            } 
            // fall through
          case 107: break;
          case 21: 
            { return CobolTypes.IS;
            } 
            // fall through
          case 108: break;
          case 22: 
            { return CobolTypes.IN;
            } 
            // fall through
          case 109: break;
          case 23: 
            { return CobolTypes.TO;
            } 
            // fall through
          case 110: break;
          case 24: 
            { return CobolTypes.OF;
            } 
            // fall through
          case 111: break;
          case 25: 
            { return CobolTypes.BY;
            } 
            // fall through
          case 112: break;
          case 26: 
            { return CobolTypes.PIC_TYPE_SIGNED_NUMERIC;
            } 
            // fall through
          case 113: break;
          case 27: 
            { return CobolTypes.PIC_TYPE_DECIMAL_NUMERIC;
            } 
            // fall through
          case 114: break;
          case 28: 
            { return CobolTypes.FLOAT;
            } 
            // fall through
          case 115: break;
          case 29: 
            { return CobolTypes.SET;
            } 
            // fall through
          case 116: break;
          case 30: 
            { return CobolTypes.DAY;
            } 
            // fall through
          case 117: break;
          case 31: 
            { return CobolTypes.END;
            } 
            // fall through
          case 118: break;
          case 32: 
            { return CobolTypes.ADD;
            } 
            // fall through
          case 119: break;
          case 33: 
            { return CobolTypes.ALL;
            } 
            // fall through
          case 120: break;
          case 34: 
            { yybegin(ITEM_TYPE); return CobolTypes.PIC;
            } 
            // fall through
          case 121: break;
          case 35: 
            { return CobolTypes.INTO;
            } 
            // fall through
          case 122: break;
          case 36: 
            { return CobolTypes.DATE;
            } 
            // fall through
          case 123: break;
          case 37: 
            { return CobolTypes.DATA;
            } 
            // fall through
          case 124: break;
          case 38: 
            { return CobolTypes.NULL;
            } 
            // fall through
          case 125: break;
          case 39: 
            { return CobolTypes.TIME;
            } 
            // fall through
          case 126: break;
          case 40: 
            { return CobolTypes.TRUE;
            } 
            // fall through
          case 127: break;
          case 41: 
            { return CobolTypes.THROUGH;
            } 
            // fall through
          case 128: break;
          case 42: 
            { return CobolTypes.FROM;
            } 
            // fall through
          case 129: break;
          case 43: 
            { return CobolTypes.CALL;
            } 
            // fall through
          case 130: break;
          case 44: 
            { return CobolTypes.COPY;
            } 
            // fall through
          case 131: break;
          case 45: 
            { return CobolTypes.CORR;
            } 
            // fall through
          case 132: break;
          case 46: 
            { return CobolTypes.MOVE;
            } 
            // fall through
          case 133: break;
          case 47: 
            { return CobolTypes.ZERO;
            } 
            // fall through
          case 134: break;
          case 48: 
            { return CobolTypes.SPACE;
            } 
            // fall through
          case 135: break;
          case 49: 
            { return CobolTypes.VALUE;
            } 
            // fall through
          case 136: break;
          case 50: 
            { return CobolTypes.USING;
            } 
            // fall through
          case 137: break;
          case 51: 
            { return CobolTypes.QUOTE;
            } 
            // fall through
          case 138: break;
          case 52: 
            { yybegin(YYINITIAL); return CobolTypes.VALUE;
            } 
            // fall through
          case 139: break;
          case 53: 
            { return CobolTypes.DIVIDE;
            } 
            // fall through
          case 140: break;
          case 54: 
            { return CobolTypes.ACCEPT;
            } 
            // fall through
          case 141: break;
          case 55: 
            { return CobolTypes.AUTHOR;
            } 
            // fall through
          case 142: break;
          case 56: 
            { return CobolTypes.GIVING;
            } 
            // fall through
          case 143: break;
          case 57: 
            { return CobolTypes.DISPLAY;
            } 
            // fall through
          case 144: break;
          case 58: 
            { return CobolTypes.NUMERIC;
            } 
            // fall through
          case 145: break;
          case 59: 
            { return CobolTypes.COMPUTE;
            } 
            // fall through
          case 146: break;
          case 60: 
            { return CobolTypes.PROGRAM;
            } 
            // fall through
          case 147: break;
          case 61: 
            { return CobolTypes.RENAMES;
            } 
            // fall through
          case 148: break;
          case 62: 
            { return CobolTypes.YYYYDDD;
            } 
            // fall through
          case 149: break;
          case 63: 
            { return CobolTypes.SECURITY;
            } 
            // fall through
          case 150: break;
          case 64: 
            { return CobolTypes.SUBTRACT;
            } 
            // fall through
          case 151: break;
          case 65: 
            { return CobolTypes.MULTIPLY;
            } 
            // fall through
          case 152: break;
          case 66: 
            { return CobolTypes.YYYYMMDD;
            } 
            // fall through
          case 153: break;
          case 67: 
            { return CobolTypes.REDEFINES;
            } 
            // fall through
          case 154: break;
          case 68: 
            { return CobolTypes.REPLACING;
            } 
            // fall through
          case 155: break;
          case 69: 
            { return CobolTypes.REMAINDER;
            } 
            // fall through
          case 156: break;
          case 70: 
            { return CobolTypes.LOW_VALUE;
            } 
            // fall through
          case 157: break;
          case 71: 
            { return CobolTypes.INITIALIZE;
            } 
            // fall through
          case 158: break;
          case 72: 
            { return CobolTypes.ALPHABETIC;
            } 
            // fall through
          case 159: break;
          case 73: 
            { return CobolTypes.PROGRAM_ID;
            } 
            // fall through
          case 160: break;
          case 74: 
            { return CobolTypes.HIGH_VALUE;
            } 
            // fall through
          case 161: break;
          case 75: 
            { return CobolTypes.DAY_OF_WEEK;
            } 
            // fall through
          case 162: break;
          case 76: 
            { return CobolTypes.INSTALLATION;
            } 
            // fall through
          case 163: break;
          case 77: 
            { return CobolTypes.DATE_WRITTEN;
            } 
            // fall through
          case 164: break;
          case 78: 
            { return CobolTypes.ALPHANUMERIC;
            } 
            // fall through
          case 165: break;
          case 79: 
            { return CobolTypes.DATE_COMPILED;
            } 
            // fall through
          case 166: break;
          case 80: 
            { return CobolTypes.DATA_DIVISION;
            } 
            // fall through
          case 167: break;
          case 81: 
            { return CobolTypes.CORRESPONDING;
            } 
            // fall through
          case 168: break;
          case 82: 
            { return CobolTypes.LINKAGE_SECTION;
            } 
            // fall through
          case 169: break;
          case 83: 
            { return CobolTypes.PROCEDURE_DIVISION;
            } 
            // fall through
          case 170: break;
          case 84: 
            { return CobolTypes.ENVIRONMENT_DIVISION;
            } 
            // fall through
          case 171: break;
          case 85: 
            { return CobolTypes.LOCAL_STORAGE_SECTION;
            } 
            // fall through
          case 172: break;
          case 86: 
            { return CobolTypes.IDENTIFICATION_DIVISION;
            } 
            // fall through
          case 173: break;
          case 87: 
            { return CobolTypes.WORKING_STORAGE_SECTION;
            } 
            // fall through
          case 174: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
