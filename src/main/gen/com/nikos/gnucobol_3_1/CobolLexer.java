/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.nikos.gnucobol_3_1;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.nikos.gnucobol_3_1.psi.CobolTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Cobol.flex</tt>
 */
class CobolLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ITEM_TYPE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15424 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\4\11\1\46\1\47\1\50\1\11\1\51\1\11\1\52\1\53\4\11\51"+
    "\14\1\54\3\14\1\55\1\56\4\14\1\57\6\14\1\60\3\11\1\61\u02c1\11\1\62\277\11");

  /* The ZZ_CMAP_Y table has 3264 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\11\1\14\1\11\1\14\34"+
    "\11\1\15\1\16\1\17\1\20\7\11\1\21\1\22\1\11\1\23\4\11\1\24\10\11\1\25\12\11"+
    "\1\4\1\11\1\26\1\4\1\11\1\27\1\4\1\11\1\30\1\31\1\11\1\32\1\33\1\34\1\35\4"+
    "\11\1\36\6\11\1\37\1\40\1\41\1\42\3\11\1\43\6\11\1\16\3\11\1\44\2\11\1\45"+
    "\1\20\1\11\1\1\1\32\3\20\1\11\1\46\1\20\1\47\10\11\1\50\1\4\1\51\1\52\1\40"+
    "\1\53\1\54\1\55\1\50\1\56\1\57\1\52\1\40\1\60\1\61\1\62\1\63\1\64\1\65\1\23"+
    "\1\40\1\66\1\67\1\70\1\50\1\71\1\72\1\52\1\40\1\66\1\73\1\74\1\50\1\75\1\76"+
    "\1\77\1\100\1\36\1\101\1\102\1\63\1\103\1\104\1\105\1\40\1\106\1\107\1\110"+
    "\1\50\1\20\1\104\1\105\1\40\1\111\1\107\1\112\1\50\1\113\1\104\1\105\2\11"+
    "\1\114\1\115\1\50\1\116\1\117\1\120\1\11\1\121\1\122\1\123\1\63\1\124\1\4"+
    "\2\11\1\125\1\126\1\127\2\20\1\130\1\131\1\132\1\133\1\134\1\135\2\20\1\70"+
    "\1\136\1\127\1\137\1\140\1\11\1\141\1\4\1\142\1\140\1\11\1\141\1\143\3\20"+
    "\4\11\1\127\4\11\1\45\2\11\1\144\2\11\1\145\24\11\1\146\1\147\2\11\1\146\2"+
    "\11\1\150\1\151\1\14\3\11\1\151\3\11\1\43\2\20\1\11\1\20\5\11\1\152\1\4\45"+
    "\11\1\41\1\11\1\4\1\32\4\11\1\153\1\154\1\155\1\156\1\11\1\156\1\11\1\157"+
    "\1\155\1\160\5\11\1\161\1\127\1\20\1\162\1\127\5\11\1\163\2\11\1\32\4\11\1"+
    "\64\1\11\1\126\2\1\1\63\1\11\1\45\1\156\2\11\1\1\1\11\2\127\2\20\1\11\1\1"+
    "\3\11\1\126\1\11\1\41\2\127\1\164\1\45\4\20\4\11\1\1\1\127\1\165\1\157\7\11"+
    "\1\157\3\11\1\163\1\106\2\11\1\45\1\154\4\20\1\166\1\11\1\127\17\11\1\167"+
    "\21\11\1\152\2\11\1\152\1\170\1\11\1\45\3\11\1\171\1\172\1\173\1\141\1\172"+
    "\1\165\1\20\1\174\1\42\1\70\1\175\1\142\1\176\1\20\1\141\2\11\1\20\1\141\1"+
    "\177\1\70\1\200\1\201\1\202\1\135\1\203\1\20\2\11\1\154\147\20\2\11\1\126"+
    "\2\11\1\126\10\11\1\204\1\157\2\11\1\144\3\11\1\27\1\42\1\11\1\205\4\206\2"+
    "\11\2\20\1\42\35\20\1\207\1\20\1\4\1\210\1\4\4\11\1\211\1\4\4\11\1\145\1\212"+
    "\1\11\1\126\1\4\4\11\1\126\1\20\1\11\1\32\3\20\1\11\40\20\133\11\1\64\4\20"+
    "\136\11\1\32\1\20\10\11\1\141\4\20\2\11\1\45\20\11\1\141\1\11\1\1\1\20\3\11"+
    "\1\213\7\11\1\16\1\20\1\214\1\215\5\11\1\216\1\11\1\126\1\163\3\20\1\214\2"+
    "\11\1\163\1\217\3\11\1\157\4\11\1\64\1\127\1\11\1\220\2\11\1\45\2\11\1\157"+
    "\1\11\1\141\4\11\1\221\1\127\1\11\1\126\3\11\1\205\1\45\1\127\1\11\1\120\4"+
    "\11\1\33\1\222\1\11\1\223\1\224\1\225\1\206\2\11\1\145\1\64\7\11\1\226\1\127"+
    "\72\11\1\157\1\11\1\227\2\11\1\1\20\20\26\11\1\45\6\11\1\127\2\20\1\205\1"+
    "\230\1\40\1\231\1\232\6\11\1\16\1\20\1\233\25\11\1\45\1\20\4\11\1\215\2\11"+
    "\1\163\2\20\1\141\1\11\1\20\1\11\1\234\1\235\1\20\1\103\1\142\7\11\1\41\1"+
    "\175\1\127\1\4\1\125\1\4\1\32\1\63\4\11\1\126\1\236\1\237\1\240\1\241\1\242"+
    "\1\11\1\14\1\243\2\45\2\20\7\11\1\32\4\20\3\11\1\156\7\20\1\244\10\20\1\11"+
    "\1\141\3\11\2\70\1\20\2\11\1\235\1\11\1\32\2\11\1\32\1\11\1\45\2\11\1\245"+
    "\1\246\2\20\11\11\1\45\1\127\2\11\1\245\1\11\1\1\2\11\1\163\3\11\1\157\11"+
    "\20\23\11\1\205\1\11\1\64\1\163\11\20\1\247\2\11\1\250\1\11\1\64\1\11\1\205"+
    "\1\11\1\126\4\20\1\11\1\251\1\11\1\64\1\11\1\127\4\20\3\11\1\252\4\20\1\253"+
    "\1\254\1\11\1\255\2\20\1\11\1\141\1\11\1\141\2\20\1\140\1\11\1\205\1\20\3"+
    "\11\1\64\1\11\1\64\1\11\1\33\1\11\1\16\6\20\4\11\1\154\3\20\3\11\1\33\3\11"+
    "\1\33\60\20\4\11\1\205\1\20\1\63\1\42\3\11\1\256\1\20\1\11\1\154\1\127\3\11"+
    "\1\142\1\20\2\11\1\257\4\11\1\260\1\35\2\20\1\11\1\23\1\11\1\261\4\20\1\262"+
    "\1\30\1\154\3\11\1\32\1\127\1\51\1\52\1\40\1\66\1\73\1\263\1\264\1\156\10"+
    "\20\4\11\1\32\1\127\2\20\4\11\1\265\1\127\12\20\3\11\1\266\1\70\1\267\2\20"+
    "\4\11\1\270\1\127\2\20\3\11\1\163\1\127\3\20\1\11\1\106\1\1\1\127\26\20\4"+
    "\11\1\127\1\42\20\20\3\11\1\126\1\164\3\11\1\50\1\127\2\20\3\11\1\154\20\20"+
    "\1\40\2\11\1\14\1\70\1\127\1\20\1\215\1\11\1\215\1\140\1\205\4\20\1\271\2"+
    "\11\1\272\1\163\1\127\52\20\71\11\1\127\6\20\6\11\1\126\1\20\14\11\1\157\53"+
    "\20\2\11\1\126\75\20\44\11\1\205\33\20\43\11\1\154\1\11\1\126\1\127\6\20\1"+
    "\11\1\45\1\156\3\11\1\205\1\157\1\127\1\233\1\273\1\11\67\20\4\11\1\156\2"+
    "\11\1\126\1\42\1\11\4\20\1\16\1\20\76\11\1\141\1\20\57\11\1\33\20\20\21\11"+
    "\1\126\5\20\30\11\1\1\20\20\6\11\1\32\1\141\1\154\1\274\1\157\113\20\1\275"+
    "\1\11\1\276\1\20\1\277\11\20\1\300\33\20\5\11\1\142\3\11\1\155\1\301\1\302"+
    "\1\303\3\11\1\304\1\305\1\11\1\306\1\307\1\105\24\11\1\266\1\11\1\105\1\145"+
    "\1\11\1\145\1\11\1\142\1\11\1\142\1\126\1\11\1\126\1\11\1\40\1\11\1\40\1\11"+
    "\1\310\3\11\40\20\3\11\1\227\2\11\1\141\1\311\1\175\1\165\1\4\25\20\1\14\1"+
    "\216\1\312\75\20\14\11\1\156\1\205\2\20\4\11\1\32\1\127\112\20\1\303\1\11"+
    "\1\313\1\314\1\315\1\316\1\317\1\320\1\167\1\1\1\321\1\1\24\20\55\11\1\205"+
    "\2\20\103\11\1\156\15\11\1\45\150\11\1\16\123\11\1\70\1\20\41\11\1\45\36\20"+
    "\1\75\1\20\6\11\10\20\17\11\41\20");

  /* The ZZ_CMAP_A table has 3360 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\15\1\3\1\2\2\1\1\2\16\15\4\0\1\36\1\0\1\10\1\0\1\15\2\0\1\11\1\17\1\20"+
    "\1\12\1\4\1\23\1\16\1\6\1\25\11\5\1\54\3\0\1\24\1\13\2\0\32\15\1\0\1\7\2\0"+
    "\1\15\1\0\1\34\1\52\1\33\1\26\1\27\1\32\1\42\1\45\1\21\1\15\1\51\1\46\1\43"+
    "\1\30\1\35\1\40\1\15\1\41\1\22\1\31\1\44\1\37\1\47\1\55\1\50\1\53\4\0\6\15"+
    "\1\14\32\15\2\0\4\15\4\0\1\15\2\0\1\15\7\0\1\15\4\0\1\15\5\0\7\15\1\0\12\15"+
    "\4\0\14\15\16\0\5\15\7\0\1\15\1\0\1\15\21\0\5\15\1\0\2\15\2\0\4\15\1\0\1\15"+
    "\6\0\1\15\1\0\3\15\1\0\1\15\1\0\4\15\1\0\23\15\1\0\13\15\1\0\5\15\2\0\15\15"+
    "\2\0\1\15\6\0\10\15\7\0\17\15\1\0\1\15\1\0\2\15\1\0\2\15\1\0\1\15\10\0\13"+
    "\15\5\0\3\15\15\0\6\15\5\0\1\15\4\0\13\15\1\0\1\15\3\0\12\15\4\0\6\15\1\0"+
    "\11\15\1\0\12\15\1\0\23\15\2\0\1\15\17\0\14\15\2\0\11\15\4\0\1\15\5\0\16\15"+
    "\2\0\5\15\1\0\10\15\6\0\20\15\2\0\16\15\1\0\10\15\2\0\2\15\2\0\16\15\1\0\1"+
    "\15\3\0\4\15\2\0\11\15\2\0\2\15\2\0\4\15\10\0\1\15\4\0\2\15\1\0\5\15\7\0\2"+
    "\15\4\0\3\15\1\0\6\15\4\0\2\15\1\0\2\15\1\0\2\15\1\0\2\15\2\0\1\15\1\0\5\15"+
    "\4\0\2\15\2\0\3\15\3\0\1\15\7\0\4\15\1\0\1\15\7\0\20\15\13\0\3\15\1\0\11\15"+
    "\1\0\2\15\1\0\2\15\1\0\5\15\2\0\12\15\1\0\3\15\1\0\3\15\2\0\1\15\20\0\1\15"+
    "\7\0\7\15\1\0\3\15\1\0\10\15\2\0\6\15\2\0\2\15\2\0\3\15\10\0\2\15\4\0\2\15"+
    "\1\0\1\15\1\0\1\15\20\0\2\15\1\0\6\15\3\0\3\15\1\0\4\15\3\0\2\15\1\0\1\15"+
    "\1\0\2\15\3\0\2\15\3\0\3\15\3\0\5\15\3\0\3\15\1\0\4\15\2\0\1\15\6\0\1\15\21"+
    "\0\1\15\6\0\4\15\1\0\10\15\1\0\3\15\1\0\30\15\3\0\10\15\1\0\3\15\1\0\4\15"+
    "\7\0\2\15\1\0\3\15\5\0\4\15\1\0\5\15\2\0\4\15\5\0\2\15\7\0\1\15\2\0\2\15\15"+
    "\0\5\15\1\0\3\15\1\0\5\15\5\0\4\15\7\0\1\15\12\0\6\15\2\0\2\15\1\0\22\15\3"+
    "\0\10\15\1\0\11\15\1\0\1\15\2\0\7\15\3\0\1\15\4\0\6\15\1\0\1\15\1\0\10\15"+
    "\2\0\2\15\14\0\13\15\4\0\20\15\1\0\12\15\7\0\2\15\1\0\1\15\2\0\2\15\1\0\1"+
    "\15\2\0\1\15\6\0\4\15\1\0\7\15\1\0\3\15\1\0\1\15\1\0\1\15\2\0\2\15\1\0\15"+
    "\15\1\0\3\15\2\0\5\15\1\0\1\15\1\0\6\15\2\0\12\15\2\0\4\15\10\0\2\15\13\0"+
    "\1\15\1\0\1\15\1\0\1\15\4\0\12\15\1\0\24\15\3\0\5\15\1\0\12\15\6\0\1\15\11"+
    "\0\6\15\1\0\1\15\5\0\1\15\2\0\13\15\1\0\15\15\1\0\4\15\2\0\7\15\1\0\1\15\1"+
    "\0\4\15\2\0\1\15\1\0\4\15\2\0\7\15\1\0\1\15\1\0\4\15\2\0\16\15\2\0\6\15\2"+
    "\0\13\15\3\0\13\15\7\0\15\15\1\0\7\15\13\0\4\15\14\0\1\15\1\0\2\15\14\0\4"+
    "\15\3\0\1\15\3\0\3\15\15\0\4\15\1\0\10\15\17\0\1\15\23\0\10\15\1\0\26\15\1"+
    "\0\15\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\6\15\1\0\7\15\1\0\1\15\3\0\3\15\1"+
    "\0\7\15\3\0\4\15\2\0\6\15\14\0\2\1\5\15\5\0\1\15\14\0\1\15\15\0\1\15\1\0\1"+
    "\15\3\0\13\15\2\0\1\15\4\0\1\15\2\0\12\15\1\0\1\15\3\0\5\15\6\0\1\15\1\0\1"+
    "\15\1\0\1\15\1\0\4\15\1\0\1\15\5\0\5\15\4\0\1\15\1\0\5\15\6\0\14\15\11\0\7"+
    "\15\1\0\7\15\6\0\3\15\11\0\5\15\2\0\5\15\3\0\7\15\2\0\2\15\2\0\3\15\5\0\13"+
    "\15\4\0\12\15\1\0\1\15\7\0\11\15\2\0\27\15\2\0\5\15\10\0\1\15\7\0\10\15\3"+
    "\0\1\15\1\0\1\15\2\0\1\15\16\0\1\15\13\0\3\15\4\0\5\15\12\0\6\15\2\0\6\15"+
    "\2\0\6\15\11\0\13\15\1\0\2\15\2\0\7\15\4\0\5\15\3\0\5\15\5\0\12\15\1\0\5\15"+
    "\1\0\1\15\1\0\2\15\1\0\2\15\1\0\12\15\3\0\15\15\3\0\2\15\30\0\3\15\2\0\6\15"+
    "\2\0\6\15\2\0\6\15\2\0\3\15\3\0\2\15\3\0\2\15\22\0\3\15\4\0\14\15\1\0\16\15"+
    "\1\0\2\15\1\0\1\15\15\0\1\15\2\0\4\15\4\0\10\15\1\0\5\15\12\0\6\15\2\0\1\15"+
    "\1\0\14\15\1\0\2\15\3\0\1\15\2\0\4\15\1\0\2\15\12\0\10\15\6\0\6\15\1\0\2\15"+
    "\5\0\10\15\1\0\3\15\1\0\13\15\4\0\3\15\4\0\14\15\2\0\1\15\2\0\4\15\2\0\1\15"+
    "\11\0\5\15\5\0\3\15\3\0\10\15\6\0\1\15\1\0\7\15\1\0\1\15\1\0\4\15\1\0\2\15"+
    "\6\0\1\15\5\0\7\15\2\0\7\15\3\0\6\15\1\0\1\15\10\0\6\15\2\0\10\15\10\0\6\15"+
    "\2\0\1\15\3\0\1\15\13\0\7\15\1\0\2\15\1\0\14\15\3\0\1\15\1\0\2\15\1\0\11\15"+
    "\5\0\15\15\3\0\2\15\6\0\5\15\3\0\6\15\2\0\7\15\16\0\4\15\4\0\3\15\15\0\1\15"+
    "\2\0\2\15\2\0\4\15\1\0\14\15\1\0\1\15\1\0\7\15\1\0\21\15\1\0\4\15\2\0\10\15"+
    "\1\0\7\15\1\0\14\15\1\0\4\15\1\0\5\15\1\0\1\15\3\0\11\15\1\0\10\15\2\0\2\15"+
    "\5\0\1\15\12\0\2\15\1\0\2\15\1\0\5\15\6\0\2\15\1\0\1\15\2\0\1\15\1\0\12\15"+
    "\1\0\4\15\1\0\1\15\1\0\1\15\6\0\1\15\4\0\1\15\1\0\1\15\1\0\1\15\1\0\3\15\1"+
    "\0\2\15\1\0\1\15\2\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\2\15\1\0"+
    "\1\15\2\0\4\15\1\0\7\15\1\0\4\15\1\0\4\15\1\0\1\15\2\0\3\15\1\0\5\15\1\0\5"+
    "\15");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\2\1\1\1\7\1\10\1\11\2\1\1\12\1\13"+
    "\1\14\23\1\1\4\1\15\2\1\1\16\1\1\1\17"+
    "\1\20\1\4\1\0\1\21\2\0\1\22\1\0\1\22"+
    "\1\23\1\24\1\25\1\21\1\26\7\21\1\27\7\21"+
    "\1\30\14\21\1\31\1\25\1\32\1\0\1\33\1\34"+
    "\11\21\1\35\1\36\10\21\1\37\4\21\1\40\13\21"+
    "\1\0\3\21\1\41\4\21\1\42\1\43\1\0\2\21"+
    "\1\44\1\45\1\46\1\47\1\50\13\21\1\51\6\21"+
    "\1\0\7\21\2\0\10\21\1\52\7\21\1\53\5\21"+
    "\1\54\6\21\1\55\2\21\1\0\5\21\1\56\1\57"+
    "\7\21\1\60\2\21\1\0\10\21\1\61\2\21\2\0"+
    "\1\21\1\62\1\21\1\63\2\21\1\40\1\21\1\64"+
    "\6\21\1\65\4\21\1\66\1\67\2\21\1\0\6\21"+
    "\1\0\2\21\1\70\1\0\1\21\1\0\1\71\5\21"+
    "\1\0\7\21\1\72\1\73\1\0\3\21\1\74\3\21"+
    "\1\0\4\21\1\75\1\0\1\76\1\0\6\21\1\0"+
    "\1\77\3\21\2\0\3\21\1\100\1\21\1\101\2\0"+
    "\1\21\1\102\2\0\3\21\1\103\1\104\1\0\1\105"+
    "\2\0\3\21\4\0\1\21\3\0\1\106\1\0\1\21"+
    "\14\0\1\107\7\0\1\110\3\0\1\111\3\0\1\112"+
    "\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\134\0\u0114"+
    "\0\u0142\0\u0170\0\u019e\0\u01cc\0\270\0\134\0\134\0\u01fa"+
    "\0\u0228\0\134\0\134\0\134\0\u0256\0\u0284\0\u02b2\0\u02e0"+
    "\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422\0\u0450"+
    "\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u0592"+
    "\0\134\0\u05c0\0\u05ee\0\134\0\u061c\0\u0592\0\134\0\u064a"+
    "\0\u0678\0\u01cc\0\u01cc\0\u0114\0\134\0\u0142\0\u0142\0\134"+
    "\0\u06a6\0\u01cc\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba"+
    "\0\u07e8\0\u0816\0\u0844\0\u01cc\0\u0872\0\u08a0\0\u08ce\0\u08fc"+
    "\0\u092a\0\u0958\0\u0986\0\u01cc\0\u09b4\0\u09e2\0\u0a10\0\u0a3e"+
    "\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae"+
    "\0\u01cc\0\134\0\134\0\u0bdc\0\134\0\u0678\0\u0c0a\0\u0c38"+
    "\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8"+
    "\0\u01cc\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea"+
    "\0\u0f18\0\u01cc\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c"+
    "\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c"+
    "\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0\0\u01cc\0\u12de"+
    "\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e"+
    "\0\u01cc\0\u01cc\0\u01cc\0\u01cc\0\u147c\0\u14aa\0\u14d8\0\u1506"+
    "\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676"+
    "\0\u01cc\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8"+
    "\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928"+
    "\0\u1956\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98"+
    "\0\u1ac6\0\u01cc\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda"+
    "\0\u1c08\0\u01cc\0\u1c36\0\u1c64\0\u1c92\0\u1cc0\0\u1cee\0\134"+
    "\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u01cc\0\u1e30"+
    "\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16\0\u1f44\0\u1f72\0\u01cc"+
    "\0\u01cc\0\u1fa0\0\u1fce\0\u1ffc\0\u202a\0\u2058\0\u2086\0\u20b4"+
    "\0\u01cc\0\u20e2\0\u2110\0\u213e\0\u216c\0\u219a\0\u21c8\0\u21f6"+
    "\0\u2224\0\u2252\0\u2280\0\u22ae\0\u01cc\0\u22dc\0\u230a\0\u2338"+
    "\0\u2366\0\u2394\0\u01cc\0\u23c2\0\u01cc\0\u23f0\0\u241e\0\u01cc"+
    "\0\u244c\0\u247a\0\u24a8\0\u24d6\0\u2504\0\u2532\0\u2560\0\u258e"+
    "\0\u01cc\0\u25bc\0\u25ea\0\u2618\0\u2646\0\u01cc\0\u01cc\0\u2674"+
    "\0\u26a2\0\u26d0\0\u26fe\0\u272c\0\u275a\0\u2788\0\u27b6\0\u27e4"+
    "\0\u2812\0\u2840\0\u286e\0\u01cc\0\u289c\0\u28ca\0\u28f8\0\u01cc"+
    "\0\u2926\0\u2954\0\u2982\0\u29b0\0\u29de\0\u2a0c\0\u2a3a\0\u2a68"+
    "\0\u2a96\0\u2ac4\0\u2af2\0\u2b20\0\u2b4e\0\u01cc\0\u01cc\0\u2b7c"+
    "\0\u2baa\0\u2bd8\0\u2c06\0\u01cc\0\u2c34\0\u2c62\0\u2c90\0\u2cbe"+
    "\0\u2cec\0\u2d1a\0\u2d48\0\u2d76\0\u01cc\0\u2da4\0\u01cc\0\u2dd2"+
    "\0\u2e00\0\u2e2e\0\u2e5c\0\u2e8a\0\u2eb8\0\u2ee6\0\u2f14\0\u01cc"+
    "\0\u2f42\0\u2f70\0\u2f9e\0\u2fcc\0\u2ffa\0\u3028\0\u3056\0\u3084"+
    "\0\u01cc\0\u30b2\0\u01cc\0\u30e0\0\u310e\0\u313c\0\u01cc\0\u316a"+
    "\0\u3198\0\u31c6\0\u31f4\0\u3222\0\u01cc\0\134\0\u3250\0\u01cc"+
    "\0\u327e\0\u32ac\0\u32da\0\u3308\0\u3336\0\u3364\0\u3392\0\u33c0"+
    "\0\u33ee\0\u341c\0\u344a\0\u3478\0\u34a6\0\134\0\u34d4\0\u3502"+
    "\0\u3530\0\u355e\0\u358c\0\u35ba\0\u35e8\0\u3616\0\u3644\0\u3672"+
    "\0\u36a0\0\u36ce\0\u36fc\0\u372a\0\134\0\u3758\0\u3786\0\u37b4"+
    "\0\u37e2\0\u3810\0\u383e\0\u386c\0\134\0\u389a\0\u38c8\0\u38f6"+
    "\0\134\0\u3924\0\u3952\0\u3980\0\134\0\134";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\12\1\3\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\4\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\14\1\43\1\44\1\45\1\14"+
    "\1\46\1\14\1\6\1\14\1\3\3\4\1\47\1\50"+
    "\1\51\5\3\1\4\1\3\1\47\1\16\1\17\1\52"+
    "\1\53\11\3\1\54\1\3\1\4\1\55\14\3\1\56"+
    "\1\57\57\0\3\4\10\0\1\4\21\0\1\4\24\0"+
    "\1\60\46\0\1\60\6\0\1\6\1\61\5\0\2\62"+
    "\1\63\2\0\2\62\3\0\10\62\1\0\15\62\1\6"+
    "\1\62\2\64\1\0\4\64\1\0\1\65\45\64\2\66"+
    "\1\0\4\66\2\0\1\67\44\66\12\0\1\70\1\71"+
    "\43\0\3\4\1\0\1\62\6\0\1\13\1\62\1\63"+
    "\2\0\2\62\3\0\10\62\1\4\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\10\62\1\0"+
    "\17\62\5\0\1\62\6\0\2\62\1\63\2\0\1\62"+
    "\1\72\3\0\1\73\1\62\1\74\5\62\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\1\62\1\75\6\62\1\0\5\62\1\76\11\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\1\77\1\62\3\0"+
    "\6\62\1\100\1\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\2\62\1\101\5\62"+
    "\1\0\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\10\62\1\0\5\62\1\102\11\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\1\103\1\62\3\0"+
    "\7\62\1\104\1\0\17\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\10\62\1\0\2\62\1\105"+
    "\14\62\5\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\6\62\1\106\1\107\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\1\110\4\62"+
    "\1\111\2\62\1\0\5\62\1\112\1\62\1\113\7\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\4\62\1\114\3\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\6\62\1\115\1\62"+
    "\1\0\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\1\116\1\62\3\0\10\62\1\0\2\62\1\117\14\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\1\62\1\120\6\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\1\121\1\62\3\0\10\62\1\0"+
    "\17\62\5\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\7\62\1\122\1\0\5\62\1\123\11\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\1\62\1\124\3\0"+
    "\10\62\1\0\17\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\1\125\1\62\3\0\7\62\1\126\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\7\62\1\127\1\0\17\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\10\62\1\0\11\62\1\130"+
    "\5\62\5\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\10\62\1\0\11\62\1\131\5\62\5\0\1\50"+
    "\46\0\1\50\23\0\1\132\107\0\1\133\35\0\1\134"+
    "\17\0\1\135\6\0\1\60\1\61\45\0\1\60\6\0"+
    "\1\136\46\0\1\136\1\0\1\71\2\0\11\71\1\0"+
    "\41\71\5\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\1\62\1\137\6\62\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\1\140\1\141\3\0\3\62"+
    "\1\142\4\62\1\0\17\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\5\62\1\143\2\62\1\0"+
    "\17\62\5\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\10\62\1\0\13\62\1\144\3\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\1\62\1\145\3\0\10\62"+
    "\1\0\1\146\16\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\3\62\1\147\4\62\1\0\11\62"+
    "\1\150\5\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\1\151\7\62\1\0\1\152\16\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\10\62"+
    "\1\0\4\62\1\153\12\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\10\62\1\0\4\62\1\154"+
    "\12\62\5\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\7\62\1\155\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\10\62\1\0\7\62"+
    "\1\156\7\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\10\62\1\0\1\62\1\157\1\160\1\62"+
    "\1\161\12\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\1\162\7\62\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\5\62\1\163"+
    "\2\62\1\0\17\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\3\62\1\164\4\62\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\10\62\1\0\1\62\1\165\15\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\10\62\1\0\7\62"+
    "\1\166\7\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\5\62\1\167\2\62\1\0\17\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\7\62"+
    "\1\170\1\0\17\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\10\62\1\0\1\62\1\171\2\62"+
    "\1\172\12\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\10\62\1\0\1\173\16\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\10\62\1\0"+
    "\1\174\16\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\10\62\1\0\7\62\1\175\7\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\1\176\1\62\3\0"+
    "\10\62\1\0\17\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\2\62\1\177\5\62\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\5\62\1\200\2\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\10\62\1\0\2\62"+
    "\1\201\14\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\10\62\1\0\11\62\1\202\5\62\46\0"+
    "\1\203\14\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\2\62\1\204\5\62\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\3\62\1\205"+
    "\4\62\1\0\17\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\3\62\1\206\4\62\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\7\62\1\207\1\0\17\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\10\62\1\0\5\62\1\210"+
    "\11\62\5\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\3\62\1\211\4\62\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\10\62\1\0"+
    "\1\62\1\212\15\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\1\213\1\62\3\0\10\62\1\0\17\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\1\62"+
    "\1\214\4\62\1\215\1\62\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\216\2\0\2\62\3\0\10\62\1\0"+
    "\17\62\5\0\1\62\6\0\2\62\1\63\2\0\1\217"+
    "\1\62\3\0\10\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\1\62\1\220\6\62"+
    "\1\0\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\1\62\1\221\6\62\1\0\17\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\10\62"+
    "\1\0\4\62\1\222\12\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\10\62\1\0\7\62\1\223"+
    "\7\62\5\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\10\62\1\0\11\62\1\224\5\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\10\62\1\0"+
    "\2\62\1\225\14\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\10\62\1\0\1\62\1\226\15\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\1\62\1\227\6\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\10\62\1\0\6\62"+
    "\1\230\10\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\10\62\1\0\6\62\1\231\10\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\10\62"+
    "\1\0\5\62\1\232\11\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\3\62\1\233\4\62\1\0"+
    "\17\62\5\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\5\62\1\234\2\62\1\0\3\62\1\235\13\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\10\62\1\0\7\62\1\236\7\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\6\62\1\237\1\62"+
    "\1\0\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\1\240\1\62\3\0\10\62\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\1\62\1\241"+
    "\6\62\1\0\17\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\3\62\1\242\4\62\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\2\62\1\243\5\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\10\62\1\0\12\62"+
    "\1\244\4\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\6\62\1\245\1\62\1\0\17\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\10\62"+
    "\1\0\12\62\1\246\4\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\10\62\1\0\11\62\1\247"+
    "\5\62\44\0\1\250\16\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\3\62\1\251\4\62\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\1\252\1\62"+
    "\3\0\10\62\1\0\17\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\6\62\1\253\1\62\1\0"+
    "\17\62\5\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\10\62\1\0\2\62\1\254\14\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\10\62\1\0"+
    "\2\62\1\255\14\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\10\62\1\0\7\62\1\256\7\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\1\257\7\62\1\0\17\62\5\0\1\62\6\0\2\62"+
    "\1\260\2\0\2\62\3\0\10\62\1\0\17\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\10\62"+
    "\1\261\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\7\62\1\262\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\10\62\1\0"+
    "\2\62\1\263\14\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\10\62\1\0\2\62\1\264\14\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\1\62\1\265\6\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\10\62\1\0\5\62"+
    "\1\266\11\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\10\62\1\0\1\62\1\267\15\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\7\62"+
    "\1\270\1\0\17\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\6\62\1\271\1\62\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\1\62\1\272\6\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\10\62\1\0\5\62"+
    "\1\273\11\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\1\62\1\274\6\62\1\0\17\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\10\62"+
    "\1\0\2\62\1\275\14\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\6\62\1\276\1\62\1\0"+
    "\17\62\5\0\1\62\6\0\2\62\1\63\2\0\1\277"+
    "\1\62\3\0\10\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\2\62\1\300\5\62"+
    "\1\0\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\1\301\1\62\3\0\10\62\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\10\62\1\0"+
    "\3\62\1\302\13\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\6\62\1\303\1\62\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\10\62\1\0\7\62\1\304\7\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\1\305\1\62\3\0\10\62\1\0"+
    "\17\62\5\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\1\306\7\62\1\0\4\62\1\307\12\62\27\0"+
    "\1\310\33\0\1\62\6\0\2\62\1\63\2\0\1\311"+
    "\1\62\3\0\10\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\6\62\1\312\1\62"+
    "\1\0\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\10\62\1\0\7\62\1\313\7\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\1\314\1\62\3\0"+
    "\10\62\1\0\17\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\6\62\1\315\1\62\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\6\62\1\316\1\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\1\62\1\317\6\62"+
    "\1\0\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\5\62\1\320\2\62\1\0\10\62\1\321"+
    "\6\62\26\0\1\322\34\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\4\62\1\323\3\62\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\7\62\1\324\1\0\17\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\1\325\1\62\3\0\10\62\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\1\62\1\326"+
    "\3\0\10\62\1\0\17\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\3\62\1\327\4\62\1\0"+
    "\17\62\5\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\3\62\1\330\4\62\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\10\62\1\0"+
    "\2\62\1\331\14\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\2\62\1\332\5\62\1\0\13\62"+
    "\1\333\3\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\10\62\1\0\2\62\1\334\14\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\1\335"+
    "\7\62\1\0\17\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\6\62\1\336\1\62\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\5\62\1\337\2\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\2\62\1\340\5\62"+
    "\1\0\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\10\62\1\0\3\62\1\341\13\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\10\62"+
    "\1\0\1\62\1\342\15\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\10\62\1\0\3\62\1\343"+
    "\13\62\5\0\1\62\6\0\2\62\1\344\2\0\2\62"+
    "\3\0\10\62\1\0\17\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\2\62\1\345\5\62\1\0"+
    "\17\62\5\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\1\346\7\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\10\62\1\0\4\62"+
    "\1\347\12\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\4\62\1\350\3\62\1\0\17\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\10\62"+
    "\1\0\7\62\1\351\7\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\10\62\1\0\7\62\1\352"+
    "\7\62\5\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\3\62\1\353\4\62\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\5\62\1\354"+
    "\2\62\1\0\17\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\10\62\1\0\11\62\1\355\5\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\7\62\1\356\1\0\17\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\10\62\1\0\2\62\1\357"+
    "\14\62\21\0\1\360\41\0\1\62\6\0\2\62\1\361"+
    "\2\0\2\62\3\0\10\62\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\2\62\1\362"+
    "\5\62\1\0\17\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\5\62\1\363\2\62\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\10\62\1\0\1\62\1\364\15\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\1\62\1\365\6\62"+
    "\1\0\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\10\62\1\0\5\62\1\366\11\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\1\62"+
    "\1\367\6\62\1\0\17\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\1\62\1\370\6\62\1\0"+
    "\17\62\5\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\10\62\1\0\5\62\1\371\11\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\10\62\1\0"+
    "\4\62\1\372\12\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\1\373\1\62\3\0\10\62\1\0\17\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\1\374"+
    "\7\62\1\0\17\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\10\62\1\0\7\62\1\375\7\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\1\62\1\376\6\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\1\62\1\377\3\0\10\62\1\0"+
    "\17\62\5\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\10\62\1\0\3\62\1\u0100\13\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\1\u0101\7\62"+
    "\1\0\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\1\u0102\7\62\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\1\u0103\1\62\3\0\10\62"+
    "\1\0\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\1\u0104\1\62\3\0\10\62\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\6\62\1\u0105"+
    "\1\62\1\0\17\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\10\62\1\0\11\62\1\u0106\5\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\3\62\1\u0107\4\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\10\62\1\0\4\62"+
    "\1\u0108\12\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\1\u0109\1\62\3\0\10\62\1\0\17\62\37\0\1\u010a"+
    "\23\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\10\62\1\0\10\62\1\u010b\6\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\10\62\1\0\4\62"+
    "\1\u010c\12\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\7\62\1\u010d\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\10\62\1\0"+
    "\4\62\1\u010e\12\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\3\62\1\u010f\4\62\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\10\62\1\0\2\62\1\u0110\14\62\5\0\1\62\6\0"+
    "\2\62\1\u0111\2\0\2\62\3\0\10\62\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\2\62\1\u0112\5\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\1\62\1\u0113\6\62"+
    "\1\0\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\10\62\1\0\11\62\1\u0114\5\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\10\62"+
    "\1\u0115\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\3\62\1\u0116\4\62\1\0\17\62\5\0"+
    "\1\62\6\0\2\62\1\u0117\2\0\2\62\3\0\10\62"+
    "\1\0\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\1\u0118\7\62\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\5\62\1\u0119"+
    "\2\62\1\0\17\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\10\62\1\0\14\62\1\u011a\2\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\3\62\1\u011b\4\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\10\62\1\0\1\62"+
    "\1\u011c\15\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\3\62\1\u011d\4\62\1\0\17\62\21\0"+
    "\1\u011e\41\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\1\62\1\u011f\6\62\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\1\62\1\u0120"+
    "\6\62\1\0\17\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\2\62\1\u0121\5\62\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\1\62\1\u0122\6\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\1\u0123\1\62\3\0\10\62\1\0"+
    "\17\62\5\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\1\62\1\u0124\6\62\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\1\u0125\1\62\3\0\10\62"+
    "\1\0\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\10\62\1\0\3\62\1\u0126\13\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\10\62"+
    "\1\0\2\62\1\u0127\14\62\22\0\1\u0128\40\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\7\62\1\u0129"+
    "\1\0\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\1\62\1\u012a\3\0\10\62\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\6\62\1\u012b"+
    "\1\62\1\0\17\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\1\62\1\u012c\6\62\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\1\u012d\1\62"+
    "\3\0\10\62\1\0\17\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\1\u012e\1\62\3\0\10\62\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\3\62\1\u012f\4\62\1\0\17\62\22\0\1\u0130\40\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\1\62"+
    "\1\u0131\6\62\1\0\17\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\2\62\1\u0132\5\62\1\0"+
    "\17\62\5\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\1\u0133\7\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\10\62\1\0\2\62"+
    "\1\u0134\14\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\5\62\1\u0135\2\62\1\0\17\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\10\62"+
    "\1\u0136\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\1\u0137\7\62\1\0\17\62\27\0\1\u0138"+
    "\33\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\10\62\1\0\2\62\1\u0139\14\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\3\62\1\u013a\4\62"+
    "\1\0\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\3\62\1\u013b\4\62\1\0\17\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\7\62"+
    "\1\u013c\1\0\17\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\10\62\1\0\7\62\1\u013d\7\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\1\62\1\u013e\6\62\1\0\17\62\21\0\1\u013f\41\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\10\62"+
    "\1\0\12\62\1\u0140\4\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\3\62\1\u0141\4\62\1\0"+
    "\17\62\5\0\1\62\6\0\2\62\1\63\2\0\1\u0142"+
    "\1\62\3\0\10\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\1\u0143\1\62\3\0\10\62\1\0"+
    "\17\62\26\0\1\u0144\62\0\1\u0145\27\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\6\62\1\u0146\1\62"+
    "\1\0\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\7\62\1\u0147\1\0\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\1\u0148\1\62\3\0\10\62"+
    "\1\0\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\2\62\1\u0149\5\62\1\0\17\62\5\0"+
    "\1\62\6\0\2\62\1\63\2\0\2\62\3\0\1\62"+
    "\1\u014a\6\62\1\0\17\62\5\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\2\62\1\u014b\5\62\1\0"+
    "\17\62\35\0\1\u014c\25\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\10\62\1\u014d\17\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\2\62\1\u014e"+
    "\5\62\1\0\17\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\5\62\1\u014f\2\62\1\0\17\62"+
    "\21\0\1\u0150\65\0\1\u0151\31\0\1\62\6\0\2\62"+
    "\1\63\2\0\2\62\3\0\10\62\1\0\3\62\1\u0152"+
    "\13\62\5\0\1\62\6\0\2\62\1\63\2\0\2\62"+
    "\3\0\10\62\1\0\2\62\1\u0153\14\62\5\0\1\62"+
    "\6\0\2\62\1\63\2\0\2\62\3\0\7\62\1\u0154"+
    "\1\0\17\62\5\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\1\u0155\7\62\1\0\17\62\30\0\1\u0156"+
    "\53\0\1\u0157\34\0\1\62\6\0\2\62\1\63\2\0"+
    "\2\62\3\0\10\62\1\0\3\62\1\u0158\13\62\37\0"+
    "\1\u0159\37\0\1\u015a\41\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\1\62\1\u015b\6\62\1\0\17\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\6\62\1\u015c\1\62\1\0\17\62\5\0\1\62\6\0"+
    "\2\62\1\63\2\0\2\62\3\0\2\62\1\u015d\5\62"+
    "\1\0\17\62\21\0\1\u015e\55\0\1\u015f\71\0\1\u0160"+
    "\25\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\10\62\1\u0161\17\62\5\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\10\62\1\0\3\62\1\u0162\13\62"+
    "\5\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\10\62\1\u0163\17\62\37\0\1\u0164\40\0\1\u0165\63\0"+
    "\1\u0166\47\0\1\u0167\40\0\1\62\6\0\2\62\1\63"+
    "\2\0\2\62\3\0\1\62\1\u0168\6\62\1\0\17\62"+
    "\26\0\1\u0169\50\0\1\u016a\55\0\1\u016b\63\0\1\u016c"+
    "\33\0\1\62\6\0\2\62\1\63\2\0\2\62\3\0"+
    "\10\62\1\u016d\17\62\21\0\1\u016e\56\0\1\u016f\70\0"+
    "\1\u0170\53\0\1\u0171\44\0\1\u0172\72\0\1\u0173\37\0"+
    "\1\u0174\64\0\1\u0175\56\0\1\u0176\53\0\1\u0177\47\0"+
    "\1\u0178\71\0\1\u0179\41\0\1\u017a\67\0\1\u017b\44\0"+
    "\1\u017c\63\0\1\u017d\62\0\1\u017e\51\0\1\u017f\45\0"+
    "\1\u0180\64\0\1\u0181\46\0\1\u0182\71\0\1\u0183\55\0"+
    "\1\u0184\50\0\1\u0185\55\0\1\u0186\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14766];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\6\1\2\11\2\1\3\11"+
    "\24\1\1\11\2\1\1\11\2\1\1\11\1\1\1\0"+
    "\1\1\2\0\1\11\1\0\1\1\1\11\41\1\2\11"+
    "\1\0\1\11\45\1\1\0\12\1\1\0\31\1\1\0"+
    "\7\1\2\0\26\1\1\11\11\1\1\0\21\1\1\0"+
    "\13\1\2\0\30\1\1\0\6\1\1\0\3\1\1\0"+
    "\1\1\1\0\6\1\1\0\11\1\1\0\7\1\1\0"+
    "\5\1\1\0\1\1\1\0\6\1\1\0\4\1\2\0"+
    "\6\1\2\0\2\1\2\0\4\1\1\11\1\0\1\1"+
    "\2\0\3\1\4\0\1\1\3\0\1\11\1\0\1\1"+
    "\14\0\1\11\7\0\1\11\3\0\1\11\3\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CobolLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 76: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 77: break;
          case 3: 
            { return CobolTypes.ADD_OP;
            } 
            // fall through
          case 78: break;
          case 4: 
            { return CobolTypes.INTEGER;
            } 
            // fall through
          case 79: break;
          case 5: 
            { return CobolTypes.DOT;
            } 
            // fall through
          case 80: break;
          case 6: 
            { return CobolTypes.MULTIPLY_OP;
            } 
            // fall through
          case 81: break;
          case 7: 
            { return CobolTypes.SUBTRACT_OP;
            } 
            // fall through
          case 82: break;
          case 8: 
            { return CobolTypes.PAREN_OPEN;
            } 
            // fall through
          case 83: break;
          case 9: 
            { return CobolTypes.PAREN_CLOSE;
            } 
            // fall through
          case 84: break;
          case 10: 
            { return CobolTypes.COMMA;
            } 
            // fall through
          case 85: break;
          case 11: 
            { return CobolTypes.EQUALS_OP;
            } 
            // fall through
          case 86: break;
          case 12: 
            { return CobolTypes.DIVIDE_OP;
            } 
            // fall through
          case 87: break;
          case 13: 
            { yybegin(YYINITIAL); return CobolTypes.DOT;
            } 
            // fall through
          case 88: break;
          case 14: 
            { return CobolTypes.PIC_TYPE_ALPHA;
            } 
            // fall through
          case 89: break;
          case 15: 
            { return CobolTypes.PIC_TYPE_NUMERIC;
            } 
            // fall through
          case 90: break;
          case 16: 
            { return CobolTypes.PIC_TYPE_ALPHANUMERIC;
            } 
            // fall through
          case 91: break;
          case 17: 
            { return CobolTypes.IDENTIFIER;
            } 
            // fall through
          case 92: break;
          case 18: 
            { return CobolTypes.STRING;
            } 
            // fall through
          case 93: break;
          case 19: 
            { return CobolTypes.POWER_OP ;
            } 
            // fall through
          case 94: break;
          case 20: 
            { return CobolParserDefinition.COMMENT;
            } 
            // fall through
          case 95: break;
          case 21: 
            { return CobolTypes.IS;
            } 
            // fall through
          case 96: break;
          case 22: 
            { return CobolTypes.IN;
            } 
            // fall through
          case 97: break;
          case 23: 
            { return CobolTypes.TO;
            } 
            // fall through
          case 98: break;
          case 24: 
            { return CobolTypes.OF;
            } 
            // fall through
          case 99: break;
          case 25: 
            { return CobolTypes.BY;
            } 
            // fall through
          case 100: break;
          case 26: 
            { return CobolTypes.PIC_TYPE_SIGNED_NUMERIC;
            } 
            // fall through
          case 101: break;
          case 27: 
            { return CobolTypes.PIC_TYPE_DECIMAL_NUMERIC;
            } 
            // fall through
          case 102: break;
          case 28: 
            { return CobolTypes.FLOAT;
            } 
            // fall through
          case 103: break;
          case 29: 
            { return CobolTypes.DAY;
            } 
            // fall through
          case 104: break;
          case 30: 
            { return CobolTypes.END;
            } 
            // fall through
          case 105: break;
          case 31: 
            { return CobolTypes.ADD;
            } 
            // fall through
          case 106: break;
          case 32: 
            { yybegin(ITEM_TYPE); return CobolTypes.PIC;
            } 
            // fall through
          case 107: break;
          case 33: 
            { return CobolTypes.INTO;
            } 
            // fall through
          case 108: break;
          case 34: 
            { return CobolTypes.DATE;
            } 
            // fall through
          case 109: break;
          case 35: 
            { return CobolTypes.DATA;
            } 
            // fall through
          case 110: break;
          case 36: 
            { return CobolTypes.TIME;
            } 
            // fall through
          case 111: break;
          case 37: 
            { return CobolTypes.FROM;
            } 
            // fall through
          case 112: break;
          case 38: 
            { return CobolTypes.CALL;
            } 
            // fall through
          case 113: break;
          case 39: 
            { return CobolTypes.COPY;
            } 
            // fall through
          case 114: break;
          case 40: 
            { return CobolTypes.CORR;
            } 
            // fall through
          case 115: break;
          case 41: 
            { return CobolTypes.MOVE;
            } 
            // fall through
          case 116: break;
          case 42: 
            { return CobolTypes.VALUE;
            } 
            // fall through
          case 117: break;
          case 43: 
            { return CobolTypes.USING;
            } 
            // fall through
          case 118: break;
          case 44: 
            { yybegin(YYINITIAL); return CobolTypes.VALUE;
            } 
            // fall through
          case 119: break;
          case 45: 
            { return CobolTypes.DIVIDE;
            } 
            // fall through
          case 120: break;
          case 46: 
            { return CobolTypes.ACCEPT;
            } 
            // fall through
          case 121: break;
          case 47: 
            { return CobolTypes.AUTHOR;
            } 
            // fall through
          case 122: break;
          case 48: 
            { return CobolTypes.GIVING;
            } 
            // fall through
          case 123: break;
          case 49: 
            { return CobolTypes.DISPLAY;
            } 
            // fall through
          case 124: break;
          case 50: 
            { return CobolTypes.NUMERIC;
            } 
            // fall through
          case 125: break;
          case 51: 
            { return CobolTypes.COMPUTE;
            } 
            // fall through
          case 126: break;
          case 52: 
            { return CobolTypes.PROGRAM;
            } 
            // fall through
          case 127: break;
          case 53: 
            { return CobolTypes.YYYYDDD;
            } 
            // fall through
          case 128: break;
          case 54: 
            { return CobolTypes.SECURITY;
            } 
            // fall through
          case 129: break;
          case 55: 
            { return CobolTypes.SUBTRACT;
            } 
            // fall through
          case 130: break;
          case 56: 
            { return CobolTypes.MULTIPLY;
            } 
            // fall through
          case 131: break;
          case 57: 
            { return CobolTypes.YYYYMMDD;
            } 
            // fall through
          case 132: break;
          case 58: 
            { return CobolTypes.REPLACING;
            } 
            // fall through
          case 133: break;
          case 59: 
            { return CobolTypes.REMAINDER;
            } 
            // fall through
          case 134: break;
          case 60: 
            { return CobolTypes.INITIALIZE;
            } 
            // fall through
          case 135: break;
          case 61: 
            { return CobolTypes.ALPHABETIC;
            } 
            // fall through
          case 136: break;
          case 62: 
            { return CobolTypes.PROGRAM_ID;
            } 
            // fall through
          case 137: break;
          case 63: 
            { return CobolTypes.DAY_OF_WEEK;
            } 
            // fall through
          case 138: break;
          case 64: 
            { return CobolTypes.INSTALLATION;
            } 
            // fall through
          case 139: break;
          case 65: 
            { return CobolTypes.DATE_WRITTEN;
            } 
            // fall through
          case 140: break;
          case 66: 
            { return CobolTypes.ALPHANUMERIC;
            } 
            // fall through
          case 141: break;
          case 67: 
            { return CobolTypes.DATE_COMPILED;
            } 
            // fall through
          case 142: break;
          case 68: 
            { return CobolTypes.DATA_DIVISION;
            } 
            // fall through
          case 143: break;
          case 69: 
            { return CobolTypes.CORRESPONDING;
            } 
            // fall through
          case 144: break;
          case 70: 
            { return CobolTypes.LINKAGE_SECTION;
            } 
            // fall through
          case 145: break;
          case 71: 
            { return CobolTypes.PROCEDURE_DIVISION;
            } 
            // fall through
          case 146: break;
          case 72: 
            { return CobolTypes.ENVIRONMENT_DIVISION;
            } 
            // fall through
          case 147: break;
          case 73: 
            { return CobolTypes.LOCAL_STORAGE_SECTION;
            } 
            // fall through
          case 148: break;
          case 74: 
            { return CobolTypes.IDENTIFICATION_DIVISION;
            } 
            // fall through
          case 149: break;
          case 75: 
            { return CobolTypes.WORKING_STORAGE_SECTION;
            } 
            // fall through
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
