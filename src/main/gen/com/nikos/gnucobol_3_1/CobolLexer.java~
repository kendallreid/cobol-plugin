/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.nikos.gnucobol_3_1;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.nikos.gnucobol_3_1.psi.CobolTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Cobol.flex</tt>
 */
class CobolLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ITEM_TYPE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15424 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\4\11\1\46\1\47\1\50\1\11\1\51\1\11\1\52\1\53\4\11\51"+
    "\14\1\54\3\14\1\55\1\56\4\14\1\57\6\14\1\60\3\11\1\61\u02c1\11\1\62\277\11");

  /* The ZZ_CMAP_Y table has 3264 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\11\1\14\1\11\1\14\34"+
    "\11\1\15\1\16\1\17\1\20\7\11\1\21\1\22\1\11\1\23\4\11\1\24\10\11\1\25\12\11"+
    "\1\4\1\11\1\26\1\4\1\11\1\27\1\4\1\11\1\30\1\31\1\11\1\32\1\33\1\34\1\35\4"+
    "\11\1\36\6\11\1\37\1\40\1\41\1\42\3\11\1\43\6\11\1\16\3\11\1\44\2\11\1\45"+
    "\1\20\1\11\1\1\1\32\3\20\1\11\1\46\1\20\1\47\10\11\1\50\1\4\1\51\1\52\1\40"+
    "\1\53\1\54\1\55\1\50\1\56\1\57\1\52\1\40\1\60\1\61\1\62\1\63\1\64\1\65\1\23"+
    "\1\40\1\66\1\67\1\70\1\50\1\71\1\72\1\52\1\40\1\66\1\73\1\74\1\50\1\75\1\76"+
    "\1\77\1\100\1\36\1\101\1\102\1\63\1\103\1\104\1\105\1\40\1\106\1\107\1\110"+
    "\1\50\1\20\1\104\1\105\1\40\1\111\1\107\1\112\1\50\1\113\1\104\1\105\2\11"+
    "\1\114\1\115\1\50\1\116\1\117\1\120\1\11\1\121\1\122\1\123\1\63\1\124\1\4"+
    "\2\11\1\125\1\126\1\127\2\20\1\130\1\131\1\132\1\133\1\134\1\135\2\20\1\70"+
    "\1\136\1\127\1\137\1\140\1\11\1\141\1\4\1\142\1\140\1\11\1\141\1\143\3\20"+
    "\4\11\1\127\4\11\1\45\2\11\1\144\2\11\1\145\24\11\1\146\1\147\2\11\1\146\2"+
    "\11\1\150\1\151\1\14\3\11\1\151\3\11\1\43\2\20\1\11\1\20\5\11\1\152\1\4\45"+
    "\11\1\41\1\11\1\4\1\32\4\11\1\153\1\154\1\155\1\156\1\11\1\156\1\11\1\157"+
    "\1\155\1\160\5\11\1\161\1\127\1\20\1\162\1\127\5\11\1\163\2\11\1\32\4\11\1"+
    "\64\1\11\1\126\2\1\1\63\1\11\1\45\1\156\2\11\1\1\1\11\2\127\2\20\1\11\1\1"+
    "\3\11\1\126\1\11\1\41\2\127\1\164\1\45\4\20\4\11\1\1\1\127\1\165\1\157\7\11"+
    "\1\157\3\11\1\163\1\106\2\11\1\45\1\154\4\20\1\166\1\11\1\127\17\11\1\167"+
    "\21\11\1\152\2\11\1\152\1\170\1\11\1\45\3\11\1\171\1\172\1\173\1\141\1\172"+
    "\1\165\1\20\1\174\1\42\1\70\1\175\1\142\1\176\1\20\1\141\2\11\1\20\1\141\1"+
    "\177\1\70\1\200\1\201\1\202\1\135\1\203\1\20\2\11\1\154\147\20\2\11\1\126"+
    "\2\11\1\126\10\11\1\204\1\157\2\11\1\144\3\11\1\27\1\42\1\11\1\205\4\206\2"+
    "\11\2\20\1\42\35\20\1\207\1\20\1\4\1\210\1\4\4\11\1\211\1\4\4\11\1\145\1\212"+
    "\1\11\1\126\1\4\4\11\1\126\1\20\1\11\1\32\3\20\1\11\40\20\133\11\1\64\4\20"+
    "\136\11\1\32\1\20\10\11\1\141\4\20\2\11\1\45\20\11\1\141\1\11\1\1\1\20\3\11"+
    "\1\213\7\11\1\16\1\20\1\214\1\215\5\11\1\216\1\11\1\126\1\163\3\20\1\214\2"+
    "\11\1\163\1\217\3\11\1\157\4\11\1\64\1\127\1\11\1\220\2\11\1\45\2\11\1\157"+
    "\1\11\1\141\4\11\1\221\1\127\1\11\1\126\3\11\1\205\1\45\1\127\1\11\1\120\4"+
    "\11\1\33\1\222\1\11\1\223\1\224\1\225\1\206\2\11\1\145\1\64\7\11\1\226\1\127"+
    "\72\11\1\157\1\11\1\227\2\11\1\1\20\20\26\11\1\45\6\11\1\127\2\20\1\205\1"+
    "\230\1\40\1\231\1\232\6\11\1\16\1\20\1\233\25\11\1\45\1\20\4\11\1\215\2\11"+
    "\1\163\2\20\1\141\1\11\1\20\1\11\1\234\1\235\1\20\1\103\1\142\7\11\1\41\1"+
    "\175\1\127\1\4\1\125\1\4\1\32\1\63\4\11\1\126\1\236\1\237\1\240\1\241\1\242"+
    "\1\11\1\14\1\243\2\45\2\20\7\11\1\32\4\20\3\11\1\156\7\20\1\244\10\20\1\11"+
    "\1\141\3\11\2\70\1\20\2\11\1\235\1\11\1\32\2\11\1\32\1\11\1\45\2\11\1\245"+
    "\1\246\2\20\11\11\1\45\1\127\2\11\1\245\1\11\1\1\2\11\1\163\3\11\1\157\11"+
    "\20\23\11\1\205\1\11\1\64\1\163\11\20\1\247\2\11\1\250\1\11\1\64\1\11\1\205"+
    "\1\11\1\126\4\20\1\11\1\251\1\11\1\64\1\11\1\127\4\20\3\11\1\252\4\20\1\253"+
    "\1\254\1\11\1\255\2\20\1\11\1\141\1\11\1\141\2\20\1\140\1\11\1\205\1\20\3"+
    "\11\1\64\1\11\1\64\1\11\1\33\1\11\1\16\6\20\4\11\1\154\3\20\3\11\1\33\3\11"+
    "\1\33\60\20\4\11\1\205\1\20\1\63\1\42\3\11\1\256\1\20\1\11\1\154\1\127\3\11"+
    "\1\142\1\20\2\11\1\257\4\11\1\260\1\35\2\20\1\11\1\23\1\11\1\261\4\20\1\262"+
    "\1\30\1\154\3\11\1\32\1\127\1\51\1\52\1\40\1\66\1\73\1\263\1\264\1\156\10"+
    "\20\4\11\1\32\1\127\2\20\4\11\1\265\1\127\12\20\3\11\1\266\1\70\1\267\2\20"+
    "\4\11\1\270\1\127\2\20\3\11\1\163\1\127\3\20\1\11\1\106\1\1\1\127\26\20\4"+
    "\11\1\127\1\42\20\20\3\11\1\126\1\164\3\11\1\50\1\127\2\20\3\11\1\154\20\20"+
    "\1\40\2\11\1\14\1\70\1\127\1\20\1\215\1\11\1\215\1\140\1\205\4\20\1\271\2"+
    "\11\1\272\1\163\1\127\52\20\71\11\1\127\6\20\6\11\1\126\1\20\14\11\1\157\53"+
    "\20\2\11\1\126\75\20\44\11\1\205\33\20\43\11\1\154\1\11\1\126\1\127\6\20\1"+
    "\11\1\45\1\156\3\11\1\205\1\157\1\127\1\233\1\273\1\11\67\20\4\11\1\156\2"+
    "\11\1\126\1\42\1\11\4\20\1\16\1\20\76\11\1\141\1\20\57\11\1\33\20\20\21\11"+
    "\1\126\5\20\30\11\1\1\20\20\6\11\1\32\1\141\1\154\1\274\1\157\113\20\1\275"+
    "\1\11\1\276\1\20\1\277\11\20\1\300\33\20\5\11\1\142\3\11\1\155\1\301\1\302"+
    "\1\303\3\11\1\304\1\305\1\11\1\306\1\307\1\105\24\11\1\266\1\11\1\105\1\145"+
    "\1\11\1\145\1\11\1\142\1\11\1\142\1\126\1\11\1\126\1\11\1\40\1\11\1\40\1\11"+
    "\1\310\3\11\40\20\3\11\1\227\2\11\1\141\1\311\1\175\1\165\1\4\25\20\1\14\1"+
    "\216\1\312\75\20\14\11\1\156\1\205\2\20\4\11\1\32\1\127\112\20\1\303\1\11"+
    "\1\313\1\314\1\315\1\316\1\317\1\320\1\167\1\1\1\321\1\1\24\20\55\11\1\205"+
    "\2\20\103\11\1\156\15\11\1\45\150\11\1\16\123\11\1\70\1\20\41\11\1\45\36\20"+
    "\1\75\1\20\6\11\10\20\17\11\41\20");

  /* The ZZ_CMAP_A table has 3360 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\15\1\3\1\2\2\1\1\2\16\15\4\0\1\37\1\0\1\10\1\0\1\15\2\0\1\11\1\17\1\20"+
    "\1\12\1\4\1\23\1\16\1\6\1\25\11\5\1\56\2\0\1\26\1\24\1\13\2\0\32\15\1\0\1"+
    "\7\2\0\1\15\1\0\1\35\1\55\1\34\1\27\1\30\1\33\1\43\1\46\1\21\1\15\1\52\1\47"+
    "\1\44\1\31\1\36\1\41\1\54\1\42\1\22\1\32\1\45\1\40\1\50\1\57\1\51\1\53\4\0"+
    "\6\15\1\14\32\15\2\0\4\15\4\0\1\15\2\0\1\15\7\0\1\15\4\0\1\15\5\0\7\15\1\0"+
    "\12\15\4\0\14\15\16\0\5\15\7\0\1\15\1\0\1\15\21\0\5\15\1\0\2\15\2\0\4\15\1"+
    "\0\1\15\6\0\1\15\1\0\3\15\1\0\1\15\1\0\4\15\1\0\23\15\1\0\13\15\1\0\5\15\2"+
    "\0\15\15\2\0\1\15\6\0\10\15\7\0\17\15\1\0\1\15\1\0\2\15\1\0\2\15\1\0\1\15"+
    "\10\0\13\15\5\0\3\15\15\0\6\15\5\0\1\15\4\0\13\15\1\0\1\15\3\0\12\15\4\0\6"+
    "\15\1\0\11\15\1\0\12\15\1\0\23\15\2\0\1\15\17\0\14\15\2\0\11\15\4\0\1\15\5"+
    "\0\16\15\2\0\5\15\1\0\10\15\6\0\20\15\2\0\16\15\1\0\10\15\2\0\2\15\2\0\16"+
    "\15\1\0\1\15\3\0\4\15\2\0\11\15\2\0\2\15\2\0\4\15\10\0\1\15\4\0\2\15\1\0\5"+
    "\15\7\0\2\15\4\0\3\15\1\0\6\15\4\0\2\15\1\0\2\15\1\0\2\15\1\0\2\15\2\0\1\15"+
    "\1\0\5\15\4\0\2\15\2\0\3\15\3\0\1\15\7\0\4\15\1\0\1\15\7\0\20\15\13\0\3\15"+
    "\1\0\11\15\1\0\2\15\1\0\2\15\1\0\5\15\2\0\12\15\1\0\3\15\1\0\3\15\2\0\1\15"+
    "\20\0\1\15\7\0\7\15\1\0\3\15\1\0\10\15\2\0\6\15\2\0\2\15\2\0\3\15\10\0\2\15"+
    "\4\0\2\15\1\0\1\15\1\0\1\15\20\0\2\15\1\0\6\15\3\0\3\15\1\0\4\15\3\0\2\15"+
    "\1\0\1\15\1\0\2\15\3\0\2\15\3\0\3\15\3\0\5\15\3\0\3\15\1\0\4\15\2\0\1\15\6"+
    "\0\1\15\21\0\1\15\6\0\4\15\1\0\10\15\1\0\3\15\1\0\30\15\3\0\10\15\1\0\3\15"+
    "\1\0\4\15\7\0\2\15\1\0\3\15\5\0\4\15\1\0\5\15\2\0\4\15\5\0\2\15\7\0\1\15\2"+
    "\0\2\15\15\0\5\15\1\0\3\15\1\0\5\15\5\0\4\15\7\0\1\15\12\0\6\15\2\0\2\15\1"+
    "\0\22\15\3\0\10\15\1\0\11\15\1\0\1\15\2\0\7\15\3\0\1\15\4\0\6\15\1\0\1\15"+
    "\1\0\10\15\2\0\2\15\14\0\13\15\4\0\20\15\1\0\12\15\7\0\2\15\1\0\1\15\2\0\2"+
    "\15\1\0\1\15\2\0\1\15\6\0\4\15\1\0\7\15\1\0\3\15\1\0\1\15\1\0\1\15\2\0\2\15"+
    "\1\0\15\15\1\0\3\15\2\0\5\15\1\0\1\15\1\0\6\15\2\0\12\15\2\0\4\15\10\0\2\15"+
    "\13\0\1\15\1\0\1\15\1\0\1\15\4\0\12\15\1\0\24\15\3\0\5\15\1\0\12\15\6\0\1"+
    "\15\11\0\6\15\1\0\1\15\5\0\1\15\2\0\13\15\1\0\15\15\1\0\4\15\2\0\7\15\1\0"+
    "\1\15\1\0\4\15\2\0\1\15\1\0\4\15\2\0\7\15\1\0\1\15\1\0\4\15\2\0\16\15\2\0"+
    "\6\15\2\0\13\15\3\0\13\15\7\0\15\15\1\0\7\15\13\0\4\15\14\0\1\15\1\0\2\15"+
    "\14\0\4\15\3\0\1\15\3\0\3\15\15\0\4\15\1\0\10\15\17\0\1\15\23\0\10\15\1\0"+
    "\26\15\1\0\15\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\6\15\1\0\7\15\1\0\1\15\3\0"+
    "\3\15\1\0\7\15\3\0\4\15\2\0\6\15\14\0\2\1\5\15\5\0\1\15\14\0\1\15\15\0\1\15"+
    "\1\0\1\15\3\0\13\15\2\0\1\15\4\0\1\15\2\0\12\15\1\0\1\15\3\0\5\15\6\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\4\15\1\0\1\15\5\0\5\15\4\0\1\15\1\0\5\15\6\0\14\15"+
    "\11\0\7\15\1\0\7\15\6\0\3\15\11\0\5\15\2\0\5\15\3\0\7\15\2\0\2\15\2\0\3\15"+
    "\5\0\13\15\4\0\12\15\1\0\1\15\7\0\11\15\2\0\27\15\2\0\5\15\10\0\1\15\7\0\10"+
    "\15\3\0\1\15\1\0\1\15\2\0\1\15\16\0\1\15\13\0\3\15\4\0\5\15\12\0\6\15\2\0"+
    "\6\15\2\0\6\15\11\0\13\15\1\0\2\15\2\0\7\15\4\0\5\15\3\0\5\15\5\0\12\15\1"+
    "\0\5\15\1\0\1\15\1\0\2\15\1\0\2\15\1\0\12\15\3\0\15\15\3\0\2\15\30\0\3\15"+
    "\2\0\6\15\2\0\6\15\2\0\6\15\2\0\3\15\3\0\2\15\3\0\2\15\22\0\3\15\4\0\14\15"+
    "\1\0\16\15\1\0\2\15\1\0\1\15\15\0\1\15\2\0\4\15\4\0\10\15\1\0\5\15\12\0\6"+
    "\15\2\0\1\15\1\0\14\15\1\0\2\15\3\0\1\15\2\0\4\15\1\0\2\15\12\0\10\15\6\0"+
    "\6\15\1\0\2\15\5\0\10\15\1\0\3\15\1\0\13\15\4\0\3\15\4\0\14\15\2\0\1\15\2"+
    "\0\4\15\2\0\1\15\11\0\5\15\5\0\3\15\3\0\10\15\6\0\1\15\1\0\7\15\1\0\1\15\1"+
    "\0\4\15\1\0\2\15\6\0\1\15\5\0\7\15\2\0\7\15\3\0\6\15\1\0\1\15\10\0\6\15\2"+
    "\0\10\15\10\0\6\15\2\0\1\15\3\0\1\15\13\0\7\15\1\0\2\15\1\0\14\15\3\0\1\15"+
    "\1\0\2\15\1\0\11\15\5\0\15\15\3\0\2\15\6\0\5\15\3\0\6\15\2\0\7\15\16\0\4\15"+
    "\4\0\3\15\15\0\1\15\2\0\2\15\2\0\4\15\1\0\14\15\1\0\1\15\1\0\7\15\1\0\21\15"+
    "\1\0\4\15\2\0\10\15\1\0\7\15\1\0\14\15\1\0\4\15\1\0\5\15\1\0\1\15\3\0\11\15"+
    "\1\0\10\15\2\0\2\15\5\0\1\15\12\0\2\15\1\0\2\15\1\0\5\15\6\0\2\15\1\0\1\15"+
    "\2\0\1\15\1\0\12\15\1\0\4\15\1\0\1\15\1\0\1\15\6\0\1\15\4\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\3\15\1\0\2\15\1\0\1\15\2\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1"+
    "\0\1\15\1\0\2\15\1\0\1\15\2\0\4\15\1\0\7\15\1\0\4\15\1\0\4\15\1\0\1\15\2\0"+
    "\3\15\1\0\5\15\1\0\5\15");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\7\1\2\1\1\1\10\1\11\1\12\2\1\1\13"+
    "\1\14\1\15\1\16\26\1\1\4\1\17\2\1\1\20"+
    "\1\1\1\21\1\22\1\4\1\0\1\23\2\0\1\24"+
    "\1\0\1\24\1\25\1\26\1\27\1\30\1\23\1\31"+
    "\1\32\3\23\1\33\10\23\1\34\12\23\1\35\1\36"+
    "\20\23\1\37\1\30\1\40\1\0\1\41\1\42\4\23"+
    "\1\43\6\23\1\44\1\45\3\23\1\46\13\23\1\47"+
    "\1\50\3\23\1\51\1\23\1\52\22\23\1\0\3\23"+
    "\1\53\5\23\1\54\1\55\2\0\1\23\1\56\2\23"+
    "\1\57\1\60\1\61\1\62\1\23\1\63\1\64\1\65"+
    "\1\66\1\67\16\23\1\70\5\23\1\0\2\23\1\71"+
    "\1\23\1\0\4\23\1\72\3\23\2\0\5\23\1\57"+
    "\6\23\1\73\12\23\1\74\1\0\6\23\1\71\1\23"+
    "\1\75\1\76\4\23\1\72\2\23\1\77\2\23\1\0"+
    "\1\23\1\100\6\23\1\101\1\102\2\23\1\73\10\23"+
    "\1\103\3\23\1\0\4\23\1\75\5\23\1\104\2\23"+
    "\2\0\2\23\1\105\1\23\1\106\2\23\1\52\2\23"+
    "\1\107\1\23\1\110\10\23\1\111\4\23\1\112\1\113"+
    "\2\23\1\0\2\23\1\114\3\23\1\115\1\23\1\0"+
    "\3\23\1\116\1\23\1\0\2\23\1\0\1\117\5\23"+
    "\1\0\7\23\1\120\1\121\1\122\1\23\1\0\1\23"+
    "\1\123\2\23\1\124\3\23\1\0\4\23\1\125\1\0"+
    "\1\126\1\127\1\0\1\23\1\123\5\23\1\0\1\130"+
    "\3\23\1\0\1\127\1\0\3\23\1\131\1\23\1\132"+
    "\2\0\1\23\1\133\2\0\3\23\1\134\1\135\1\0"+
    "\1\136\2\0\3\23\4\0\1\23\3\0\1\137\1\0"+
    "\1\23\14\0\1\140\7\0\1\141\3\0\1\142\3\0"+
    "\1\143\1\144";

  private static int [] zzUnpackAction() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\140\0\u0120"+
    "\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\300\0\140\0\140"+
    "\0\u0240\0\u0270\0\140\0\140\0\140\0\u02a0\0\u02d0\0\u0300"+
    "\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450\0\u0480"+
    "\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600"+
    "\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06c0\0\140\0\u06f0\0\u0720"+
    "\0\140\0\u0750\0\u06c0\0\140\0\u0780\0\u07b0\0\u0210\0\u0210"+
    "\0\u0120\0\140\0\u0150\0\u0150\0\140\0\u07e0\0\140\0\u0210"+
    "\0\u0810\0\u0840\0\u0210\0\u0870\0\u08a0\0\u08d0\0\140\0\u0900"+
    "\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0210"+
    "\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0"+
    "\0\u0c00\0\u0c30\0\u0210\0\u0210\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0"+
    "\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70"+
    "\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0210\0\140\0\140\0\u0f60"+
    "\0\140\0\u07b0\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u0210\0\u1050"+
    "\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0"+
    "\0\u1200\0\u1230\0\u0210\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320"+
    "\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u0210\0\u0210"+
    "\0\u1470\0\u14a0\0\u14d0\0\u0210\0\u1500\0\u1530\0\u1560\0\u1590"+
    "\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710"+
    "\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890"+
    "\0\u18c0\0\u18f0\0\u1920\0\u1950\0\u0210\0\u1980\0\u19b0\0\u19e0"+
    "\0\u1a10\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u0210"+
    "\0\u1b60\0\u1b90\0\u1bc0\0\u0210\0\u0210\0\u0210\0\u1bf0\0\u0210"+
    "\0\u0210\0\u0210\0\u0210\0\u1c20\0\u1c50\0\u1c80\0\u1cb0\0\u1ce0"+
    "\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00\0\u1e30\0\u1e60"+
    "\0\u1e90\0\u1ec0\0\u0210\0\u1ef0\0\u1f20\0\u1f50\0\u1f80\0\u1fb0"+
    "\0\u1fe0\0\u2010\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130"+
    "\0\u2160\0\u2190\0\u21c0\0\u21f0\0\u2220\0\u2250\0\u2280\0\u22b0"+
    "\0\u22e0\0\u2310\0\u2340\0\u2370\0\u23a0\0\u0210\0\u23d0\0\u2400"+
    "\0\u2430\0\u2460\0\u2490\0\u24c0\0\u24f0\0\u2520\0\u2550\0\u2580"+
    "\0\u25b0\0\u25e0\0\u2610\0\u2640\0\u2670\0\u26a0\0\u26d0\0\u0210"+
    "\0\u2700\0\u2730\0\u2760\0\u2790\0\u27c0\0\u27f0\0\u2820\0\u0210"+
    "\0\u2850\0\u2880\0\140\0\u28b0\0\u28e0\0\u2910\0\u2940\0\u0210"+
    "\0\u2970\0\u29a0\0\u0210\0\u29d0\0\u2a00\0\u2a30\0\u2a60\0\u0210"+
    "\0\u2a90\0\u2ac0\0\u2af0\0\u2b20\0\u2b50\0\u2b80\0\u0210\0\u0210"+
    "\0\u2bb0\0\u2be0\0\u0210\0\u2c10\0\u2c40\0\u2c70\0\u2ca0\0\u2cd0"+
    "\0\u2d00\0\u2d30\0\u2d60\0\u0210\0\u2d90\0\u2dc0\0\u2df0\0\u2e20"+
    "\0\u2e50\0\u2e80\0\u2eb0\0\u2ee0\0\u0210\0\u2f10\0\u2f40\0\u2f70"+
    "\0\u2fa0\0\u2fd0\0\u0210\0\u3000\0\u3030\0\u3060\0\u3090\0\u30c0"+
    "\0\u30f0\0\u0210\0\u3120\0\u0210\0\u3150\0\u3180\0\u0210\0\u31b0"+
    "\0\u31e0\0\u3210\0\u3240\0\u0210\0\u3270\0\u32a0\0\u32d0\0\u3300"+
    "\0\u3330\0\u3360\0\u3390\0\u33c0\0\u0210\0\u33f0\0\u3420\0\u3450"+
    "\0\u3480\0\u0210\0\u0210\0\u34b0\0\u34e0\0\u3510\0\u3540\0\u3570"+
    "\0\u0210\0\u35a0\0\u35d0\0\u3600\0\u0210\0\u3630\0\u3660\0\u3690"+
    "\0\u36c0\0\u36f0\0\u0210\0\u3720\0\u3750\0\u3780\0\u37b0\0\u37e0"+
    "\0\u0210\0\u3810\0\u3840\0\u3870\0\u38a0\0\u38d0\0\u3900\0\u3930"+
    "\0\u3960\0\u3990\0\u39c0\0\u39f0\0\u3a20\0\u3a50\0\u0210\0\u0210"+
    "\0\u0210\0\u3a80\0\u3ab0\0\u3ae0\0\u3b10\0\u3b40\0\u3b70\0\u0210"+
    "\0\u3ba0\0\u3bd0\0\u3c00\0\u3c30\0\u3c60\0\u3c90\0\u3cc0\0\u3cf0"+
    "\0\u0210\0\u3d20\0\u0210\0\u3d50\0\u3d80\0\u3db0\0\u0210\0\u3de0"+
    "\0\u3e10\0\u3e40\0\u3e70\0\u3ea0\0\u3ed0\0\u0210\0\u3f00\0\u3f30"+
    "\0\u3f60\0\u3f90\0\u0210\0\u3fc0\0\u3ff0\0\u4020\0\u4050\0\u0210"+
    "\0\u4080\0\u0210\0\u40b0\0\u40e0\0\u4110\0\u0210\0\u4140\0\u4170"+
    "\0\u41a0\0\u41d0\0\u4200\0\u0210\0\140\0\u4230\0\u0210\0\u4260"+
    "\0\u4290\0\u42c0\0\u42f0\0\u4320\0\u4350\0\u4380\0\u43b0\0\u43e0"+
    "\0\u4410\0\u4440\0\u4470\0\u44a0\0\140\0\u44d0\0\u4500\0\u4530"+
    "\0\u4560\0\u4590\0\u45c0\0\u45f0\0\u4620\0\u4650\0\u4680\0\u46b0"+
    "\0\u46e0\0\u4710\0\u4740\0\140\0\u4770\0\u47a0\0\u47d0\0\u4800"+
    "\0\u4830\0\u4860\0\u4890\0\140\0\u48c0\0\u48f0\0\u4920\0\140"+
    "\0\u4950\0\u4980\0\u49b0\0\140\0\140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\4\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\15\1\51\1\52\1\53\1\6\1\15\1\3\3\4"+
    "\1\54\1\55\1\56\5\3\1\4\1\3\1\54\1\17"+
    "\1\20\1\57\1\60\12\3\1\61\1\3\1\4\1\62"+
    "\15\3\1\63\1\64\61\0\3\4\10\0\1\4\22\0"+
    "\1\4\25\0\1\65\50\0\1\65\6\0\1\6\1\66"+
    "\5\0\2\67\1\70\2\0\2\67\4\0\10\67\1\0"+
    "\16\67\1\6\1\67\2\71\1\0\4\71\1\0\1\72"+
    "\47\71\2\73\1\0\4\73\2\0\1\74\46\73\12\0"+
    "\1\75\1\76\70\0\1\77\34\0\3\4\1\0\1\67"+
    "\6\0\1\14\1\67\1\70\2\0\2\67\4\0\10\67"+
    "\1\4\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\10\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\1\67\1\100\4\0\1\101\1\67"+
    "\1\102\1\67\1\103\3\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\1\67\1\104"+
    "\6\67\1\0\1\67\1\105\3\67\1\106\12\67\24\0"+
    "\1\107\40\0\1\67\6\0\2\67\1\70\2\0\1\110"+
    "\1\67\4\0\6\67\1\111\1\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\2\67"+
    "\1\112\5\67\1\0\7\67\1\113\10\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\1\67\1\114"+
    "\5\67\1\115\1\0\5\67\1\116\12\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\1\117\1\67\4\0\7\67"+
    "\1\120\1\0\2\67\1\121\3\67\1\122\11\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\10\67"+
    "\1\0\2\67\1\123\15\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\6\67\1\124\1\125\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\1\126\1\67\1\127\2\67\1\130\2\67\1\0"+
    "\5\67\1\131\1\67\1\132\10\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\4\67\1\133\3\67"+
    "\1\0\2\67\1\134\15\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\6\67\1\135\1\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\1\136"+
    "\1\67\4\0\7\67\1\137\1\0\2\67\1\140\15\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\1\67\1\141\6\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\1\142\1\67\4\0\10\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\7\67\1\143\1\0\5\67\1\144\12\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\1\67\1\145\4\0"+
    "\10\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\1\146\1\67\4\0\10\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\1\147\1\67\4\0"+
    "\7\67\1\150\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\7\67\1\151\1\0\20\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\10\67\1\0\11\67\1\152\6\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\1\67\1\153\6\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\10\67\1\0\5\67\1\154\12\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\10\67"+
    "\1\0\11\67\1\155\6\67\5\0\1\55\50\0\1\55"+
    "\23\0\1\156\113\0\1\157\36\0\1\160\20\0\1\161"+
    "\6\0\1\65\1\66\47\0\1\65\6\0\1\162\50\0"+
    "\1\162\1\0\1\76\2\0\11\76\1\0\43\76\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\1\67"+
    "\1\163\6\67\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\1\164\1\165\4\0\3\67\1\166\4\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\3\67\1\167\1\67\1\170\2\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\6\67\1\171\1\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\10\67\1\0"+
    "\15\67\1\172\2\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\1\67\1\173\4\0\10\67\1\0\1\174\17\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\3\67\1\175\4\67\1\0\11\67\1\176\6\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\1\177"+
    "\7\67\1\0\1\200\17\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\1\67\1\201\4\0\10\67\1\0\20\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\10\67\1\0\3\67\1\202\14\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\3\67\1\203\4\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\10\67\1\0\4\67\1\204\2\67\1\205"+
    "\10\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\10\67\1\0\4\67\1\206\13\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\10\67\1\0"+
    "\5\67\1\207\12\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\1\67\1\210\6\67\1\0\2\67"+
    "\1\211\15\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\7\67\1\212\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\10\67\1\0"+
    "\7\67\1\213\10\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\10\67\1\0\1\67\1\214\1\215"+
    "\1\67\1\216\13\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\1\217\7\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\1\220"+
    "\7\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\5\67\1\221\2\67\1\0\20\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\3\67\1\222\4\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\10\67\1\0\1\67"+
    "\1\223\5\67\1\224\10\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\10\67\1\0\7\67\1\225"+
    "\10\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\5\67\1\226\2\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\1\67\1\227\4\0\10\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\7\67\1\230\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\1\231\1\67"+
    "\1\232\5\67\1\0\1\67\1\233\2\67\1\234\13\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\10\67\1\0\1\235\17\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\10\67\1\0\1\236\17\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\10\67\1\0\7\67\1\237\10\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\1\240\1\67\4\0\10\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\10\67\1\0\3\67\1\241\14\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\2\67\1\242"+
    "\5\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\5\67\1\243\2\67\1\0\10\67"+
    "\1\244\7\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\10\67\1\0\2\67\1\245\15\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\10\67"+
    "\1\0\11\67\1\246\6\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\10\67\1\0\2\67\1\247"+
    "\15\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\7\67\1\250\1\0\20\67\47\0\1\251\15\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\2\67"+
    "\1\252\5\67\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\3\67\1\253\4\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\3\67\1\254\4\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\7\67\1\255"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\10\67\1\0\5\67\1\256\12\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\5\67"+
    "\1\257\2\67\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\3\67\1\260\4\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\10\67\1\0\1\67\1\261\16\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\1\262\1\67\4\0\10\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\1\67\1\263\4\67\1\264\1\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\265\2\0\2\67"+
    "\4\0\10\67\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\266\2\0\2\67\4\0\10\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\1\267\1\67\4\0"+
    "\10\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\1\67\1\270\6\67\1\0\20\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\6\67\1\271\1\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\1\67\1\272\6\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\10\67\1\0\7\67\1\273\10\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\1\67"+
    "\1\274\6\67\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\1\67\1\275\6\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\2\67\1\276\5\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\7\67\1\277"+
    "\1\0\5\67\1\300\12\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\10\67\1\0\4\67\1\301"+
    "\13\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\10\67\1\0\7\67\1\302\10\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\10\67\1\0"+
    "\11\67\1\303\6\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\10\67\1\0\2\67\1\304\15\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\10\67\1\0\1\67\1\305\16\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\1\67\1\306\6\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\10\67\1\0\6\67\1\307\11\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\10\67"+
    "\1\0\6\67\1\310\11\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\10\67\1\0\5\67\1\311"+
    "\12\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\3\67\1\312\4\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\1\313\1\67\4\0\10\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\5\67\1\314\2\67\1\0\3\67\1\315"+
    "\14\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\1\67\1\316\6\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\6\67\1\317"+
    "\1\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\10\67\1\0\7\67\1\320\10\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\6\67\1\321\1\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\1\322\1\67\4\0\10\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\1\67\1\323\6\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\3\67\1\324"+
    "\4\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\2\67\1\325\5\67\1\0\20\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\10\67\1\0\6\67\1\326\11\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\10\67\1\0\12\67"+
    "\1\327\5\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\6\67\1\330\1\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\331\2\0\2\67\4\0\10\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\10\67\1\0\12\67\1\332\5\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\10\67"+
    "\1\0\11\67\1\333\6\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\7\67\1\334\1\0\20\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\3\67\1\335\4\67\1\0\20\67\45\0\1\336\17\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\3\67"+
    "\1\337\4\67\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\1\340\1\67\4\0\10\67\1\0\20\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\6\67\1\341\1\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\10\67\1\0\2\67"+
    "\1\342\15\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\1\67\1\343\6\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\10\67"+
    "\1\0\2\67\1\344\15\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\10\67\1\0\7\67\1\345"+
    "\10\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\1\346\7\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\347\2\0\2\67\4\0\10\67\1\0\20\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\10\67\1\350\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\7\67\1\351\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\1\352\1\67\4\0"+
    "\10\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\10\67\1\0\2\67\1\353\15\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\3\67\1\354\4\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\10\67\1\0\2\67"+
    "\1\355\15\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\1\67\1\356\4\0\10\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\10\67\1\0"+
    "\5\67\1\357\12\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\1\67\1\360\6\67\1\0\20\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\10\67\1\0\5\67\1\361\12\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\10\67\1\0\1\67"+
    "\1\362\16\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\7\67\1\363\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\6\67\1\364"+
    "\1\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\1\67\1\365\6\67\1\0\20\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\10\67\1\0\5\67\1\366\12\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\3\67\1\367\4\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\1\67\1\370\6\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\10\67"+
    "\1\0\2\67\1\371\15\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\4\67\1\372\3\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\10\67\1\0\4\67\1\373\13\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\6\67\1\374"+
    "\1\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\1\375\1\67\4\0\10\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\2\67"+
    "\1\376\5\67\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\1\377\1\67\4\0\10\67\1\0\20\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\10\67\1\0\3\67\1\u0100\14\67\5\0\1\67\6\0"+
    "\2\67\1\u0101\2\0\2\67\4\0\10\67\1\0\20\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\6\67\1\u0102\1\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\10\67\1\0\7\67"+
    "\1\u0103\10\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\10\67\1\0\1\u0104\17\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\1\u0105\1\67\4\0\10\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\1\u0106\7\67\1\0\4\67\1\u0107\13\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\1\67\1\u0108"+
    "\4\0\1\67\1\u0109\6\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\1\67\1\u010a"+
    "\6\67\1\0\20\67\30\0\1\u010b\34\0\1\67\6\0"+
    "\2\67\1\70\2\0\1\u010c\1\67\4\0\10\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\6\67\1\u010d\1\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\10\67\1\0"+
    "\7\67\1\u010e\10\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\1\u010f\1\67\4\0\10\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\1\67\1\u0110\4\0"+
    "\10\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\6\67\1\u0111\1\67\1\0\20\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\6\67\1\u0112\1\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\1\67\1\u0113\6\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\5\67\1\u0114\2\67\1\0\10\67\1\u0115"+
    "\7\67\27\0\1\u0116\35\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\4\67\1\u0117\3\67\1\0\20\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\4\67\1\u0118\3\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\7\67\1\u0119\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\1\u011a"+
    "\1\67\4\0\10\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\1\u011b\1\67\4\0\10\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\10\67\1\0\3\67\1\u011c\14\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\1\67\1\u011d\4\0\10\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\3\67\1\u011e\4\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\3\67"+
    "\1\u011f\4\67\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\10\67\1\0\2\67\1\u0120"+
    "\15\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\2\67\1\u0121\5\67\1\0\15\67\1\u0122\2\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\1\67\1\u0123"+
    "\4\0\10\67\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\10\67\1\0\2\67\1\u0124"+
    "\15\67\5\0\1\67\6\0\2\67\1\70\2\0\1\u0125"+
    "\1\67\4\0\10\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\1\u0126\7\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\6\67\1\u0127\1\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\1\u0128\1\67\4\0\10\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\1\67\1\u0129\6\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\5\67"+
    "\1\u012a\2\67\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\2\67\1\u012b\5\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\10\67\1\0\3\67\1\u012c\14\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\10\67\1\0"+
    "\1\67\1\u012d\16\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\10\67\1\0\1\u012e\17\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\10\67"+
    "\1\0\3\67\1\u012f\14\67\5\0\1\67\6\0\2\67"+
    "\1\u0130\2\0\2\67\4\0\10\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\6\67"+
    "\1\u0131\1\67\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\2\67\1\u0132\5\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\1\u0133\7\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\10\67\1\0\4\67"+
    "\1\u0134\13\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\1\67\1\u0108\4\0\10\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\1\67\1\u0135\4\0\10\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\4\67\1\u0136\3\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\10\67"+
    "\1\0\7\67\1\u0137\10\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\10\67\1\0\7\67\1\u0138"+
    "\10\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\3\67\1\u0139\4\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\5\67\1\u013a"+
    "\2\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\10\67\1\0\11\67\1\u013b\6\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\7\67\1\u013c\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\10\67\1\0\2\67\1\u013d"+
    "\15\67\21\0\1\u013e\43\0\1\67\6\0\2\67\1\u013f"+
    "\2\0\2\67\4\0\10\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\2\67\1\u0140"+
    "\5\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\10\67\1\0\1\u0141\17\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\5\67"+
    "\1\u0142\2\67\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\10\67\1\0\6\67\1\300"+
    "\11\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\10\67\1\0\1\67\1\u0143\16\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\1\67\1\u0144"+
    "\6\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\10\67\1\0\5\67\1\u0145\12\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\1\67\1\u0146\6\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\1\67\1\u0147\6\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\10\67\1\0\1\u0148\17\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\10\67\1\0"+
    "\5\67\1\u0149\12\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\10\67\1\0\4\67\1\u014a\13\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\2\67\1\u014b\5\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\1\67\1\u014c\4\0\10\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\1\u014d"+
    "\1\67\4\0\10\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\1\u014e\7\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\10\67\1\0\7\67\1\u014f\10\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\6\67\1\u0150"+
    "\1\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\1\67\1\u0151\6\67\1\0\20\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\1\67\1\u0152"+
    "\4\0\10\67\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\10\67\1\0\7\67\1\u0153"+
    "\10\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\10\67\1\0\3\67\1\u0154\14\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\1\u0155\7\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\1\u0156\7\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\1\u0157\1\67\4\0\10\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\1\u0158\1\67\4\0\10\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\6\67\1\u0159"+
    "\1\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\10\67\1\0\11\67\1\u015a\6\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\3\67\1\u015b\4\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\10\67\1\0\4\67"+
    "\1\u015c\13\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\1\u015d\1\67\4\0\10\67\1\0\20\67\40\0\1\u015e"+
    "\24\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\10\67\1\0\10\67\1\u015f\7\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\10\67\1\0\4\67"+
    "\1\u0160\13\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\1\67\1\u0161\6\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\7\67"+
    "\1\u0162\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\10\67\1\0\4\67\1\u0163\13\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\3\67\1\u0164\4\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\1\67\1\u0165\6\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\10\67\1\0\2\67\1\u0166\15\67\5\0"+
    "\1\67\6\0\2\67\1\u0167\2\0\2\67\4\0\10\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\1\67\1\u0168\6\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\2\67"+
    "\1\u0169\5\67\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\1\67\1\u016a\6\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\10\67\1\0\11\67\1\u016b\6\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\10\67\1\0"+
    "\7\67\1\u016c\10\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\10\67\1\u016d\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\3\67\1\u016e"+
    "\4\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\10\67\1\0\5\67\1\u016f\12\67"+
    "\5\0\1\67\6\0\2\67\1\u0170\2\0\2\67\4\0"+
    "\10\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\1\u0171\7\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\5\67"+
    "\1\u0172\2\67\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\10\67\1\0\13\67\1\u0173"+
    "\4\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\3\67\1\u0174\4\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\10\67\1\0"+
    "\1\67\1\u0175\16\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\3\67\1\u0176\4\67\1\0\20\67"+
    "\21\0\1\u0177\43\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\1\67\1\u0178\6\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\1\67"+
    "\1\u0179\6\67\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\2\67\1\u017a\5\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\1\67\1\u017b\6\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\1\u017c\1\67\4\0\10\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\1\67\1\u017d\6\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\1\u017e\1\67\4\0"+
    "\10\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\1\67\1\u017f\4\0\10\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\10\67"+
    "\1\0\3\67\1\u0180\14\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\10\67\1\0\2\67\1\u0181"+
    "\15\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\10\67\1\0\5\67\1\u0182\12\67\22\0\1\u0183"+
    "\42\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\7\67\1\u0184\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\1\67\1\u0185\6\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\1\67"+
    "\1\u0186\4\0\10\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\6\67\1\u0187\1\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\1\67\1\u0188\6\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\1\u0189\1\67\4\0"+
    "\10\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\1\u018a\1\67\4\0\10\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\3\67"+
    "\1\u018b\4\67\1\0\20\67\22\0\1\u018c\42\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\1\67\1\u018d"+
    "\6\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\2\67\1\u018e\5\67\1\0\20\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\1\u018f\7\67\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\10\67\1\0\2\67\1\u0190"+
    "\15\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\5\67\1\u0191\2\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\10\67\1\u0192"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\1\u0193\7\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\1\67\1\u0194\6\67"+
    "\1\0\20\67\30\0\1\u0195\34\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\10\67\1\0\2\67\1\u0196"+
    "\15\67\5\0\1\67\6\0\2\67\1\70\2\0\1\67"+
    "\1\u0197\4\0\10\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\3\67\1\u0198\4\67"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\3\67\1\u0199\4\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\7\67"+
    "\1\u019a\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\10\67\1\0\7\67\1\u019b\10\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\1\67\1\u019c\6\67\1\0\20\67\21\0\1\u019d\43\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\10\67"+
    "\1\0\12\67\1\u019e\5\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\3\67\1\u019f\4\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\1\u01a0"+
    "\1\67\4\0\10\67\1\0\20\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\1\u01a1\1\67\4\0\10\67\1\0"+
    "\20\67\27\0\1\u01a2\35\0\1\67\6\0\2\67\1\70"+
    "\2\0\1\67\1\u01a3\4\0\10\67\1\0\20\67\34\0"+
    "\1\u01a4\30\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\6\67\1\u01a5\1\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\7\67\1\u01a6"+
    "\1\0\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\1\u01a7\1\67\4\0\10\67\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\2\67\1\u01a8"+
    "\5\67\1\0\20\67\5\0\1\67\6\0\2\67\1\70"+
    "\2\0\2\67\4\0\1\67\1\u01a9\6\67\1\0\20\67"+
    "\5\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\2\67\1\u01aa\5\67\1\0\20\67\36\0\1\u01ab\26\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\10\67"+
    "\1\u01ac\20\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\2\67\1\u01ad\5\67\1\0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\5\67"+
    "\1\u01ae\2\67\1\0\20\67\21\0\1\u01af\70\0\1\u01b0"+
    "\32\0\1\67\6\0\2\67\1\70\2\0\2\67\4\0"+
    "\10\67\1\0\3\67\1\u01b1\14\67\5\0\1\67\6\0"+
    "\2\67\1\70\2\0\2\67\4\0\10\67\1\0\2\67"+
    "\1\u01b2\15\67\5\0\1\67\6\0\2\67\1\70\2\0"+
    "\2\67\4\0\7\67\1\u01b3\1\0\20\67\5\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\1\u01b4\7\67"+
    "\1\0\20\67\31\0\1\u01b5\55\0\1\u01b6\35\0\1\67"+
    "\6\0\2\67\1\70\2\0\2\67\4\0\10\67\1\0"+
    "\3\67\1\u01b7\14\67\40\0\1\u01b8\40\0\1\u01b9\43\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\1\67"+
    "\1\u01ba\6\67\1\0\20\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\6\67\1\u01bb\1\67\1\0"+
    "\20\67\5\0\1\67\6\0\2\67\1\70\2\0\2\67"+
    "\4\0\2\67\1\u01bc\5\67\1\0\20\67\21\0\1\u01bd"+
    "\57\0\1\u01be\74\0\1\u01bf\26\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\10\67\1\u01c0\20\67\5\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\10\67"+
    "\1\0\3\67\1\u01c1\14\67\5\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\10\67\1\u01c2\20\67\40\0"+
    "\1\u01c3\41\0\1\u01c4\66\0\1\u01c5\50\0\1\u01c6\42\0"+
    "\1\67\6\0\2\67\1\70\2\0\2\67\4\0\1\67"+
    "\1\u01c7\6\67\1\0\20\67\27\0\1\u01c8\51\0\1\u01c9"+
    "\57\0\1\u01ca\66\0\1\u01cb\34\0\1\67\6\0\2\67"+
    "\1\70\2\0\2\67\4\0\10\67\1\u01cc\20\67\21\0"+
    "\1\u01cd\60\0\1\u01ce\73\0\1\u01cf\55\0\1\u01d0\45\0"+
    "\1\u01d1\75\0\1\u01d2\40\0\1\u01d3\67\0\1\u01d4\60\0"+
    "\1\u01d5\55\0\1\u01d6\50\0\1\u01d7\74\0\1\u01d8\42\0"+
    "\1\u01d9\72\0\1\u01da\45\0\1\u01db\66\0\1\u01dc\64\0"+
    "\1\u01dd\53\0\1\u01de\46\0\1\u01df\67\0\1\u01e0\47\0"+
    "\1\u01e1\74\0\1\u01e2\57\0\1\u01e3\52\0\1\u01e4\57\0"+
    "\1\u01e5\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18912];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\7\1\2\11\2\1\3\11"+
    "\30\1\1\11\2\1\1\11\2\1\1\11\1\1\1\0"+
    "\1\1\2\0\1\11\1\0\1\1\1\11\1\1\1\11"+
    "\7\1\1\11\46\1\2\11\1\0\1\11\67\1\1\0"+
    "\13\1\2\0\42\1\1\0\4\1\1\0\10\1\2\0"+
    "\30\1\1\0\11\1\1\11\12\1\1\0\31\1\1\0"+
    "\15\1\2\0\36\1\1\0\10\1\1\0\5\1\1\0"+
    "\2\1\1\0\6\1\1\0\13\1\1\0\10\1\1\0"+
    "\5\1\1\0\2\1\1\0\7\1\1\0\4\1\1\0"+
    "\1\1\1\0\6\1\2\0\2\1\2\0\4\1\1\11"+
    "\1\0\1\1\2\0\3\1\4\0\1\1\3\0\1\11"+
    "\1\0\1\1\14\0\1\11\7\0\1\11\3\0\1\11"+
    "\3\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CobolLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 101: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 102: break;
          case 3: 
            { return CobolTypes.ADD_OP;
            } 
            // fall through
          case 103: break;
          case 4: 
            { return CobolTypes.INTEGER;
            } 
            // fall through
          case 104: break;
          case 5: 
            { return CobolTypes.DOT;
            } 
            // fall through
          case 105: break;
          case 6: 
            { return CobolTypes.MULTIPLY_OP;
            } 
            // fall through
          case 106: break;
          case 7: 
            { return CobolTypes.MORE_OP;
            } 
            // fall through
          case 107: break;
          case 8: 
            { return CobolTypes.SUBTRACT_OP;
            } 
            // fall through
          case 108: break;
          case 9: 
            { return CobolTypes.PAREN_OPEN;
            } 
            // fall through
          case 109: break;
          case 10: 
            { return CobolTypes.PAREN_CLOSE;
            } 
            // fall through
          case 110: break;
          case 11: 
            { return CobolTypes.COMMA;
            } 
            // fall through
          case 111: break;
          case 12: 
            { return CobolTypes.EQUALS_OP;
            } 
            // fall through
          case 112: break;
          case 13: 
            { return CobolTypes.DIVIDE_OP;
            } 
            // fall through
          case 113: break;
          case 14: 
            { return CobolTypes.LESS_OP;
            } 
            // fall through
          case 114: break;
          case 15: 
            { yybegin(YYINITIAL); return CobolTypes.DOT;
            } 
            // fall through
          case 115: break;
          case 16: 
            { return CobolTypes.PIC_TYPE_ALPHA;
            } 
            // fall through
          case 116: break;
          case 17: 
            { return CobolTypes.PIC_TYPE_NUMERIC;
            } 
            // fall through
          case 117: break;
          case 18: 
            { return CobolTypes.PIC_TYPE_ALPHANUMERIC;
            } 
            // fall through
          case 118: break;
          case 19: 
            { return CobolTypes.IDENTIFIER;
            } 
            // fall through
          case 119: break;
          case 20: 
            { return CobolTypes.STRING;
            } 
            // fall through
          case 120: break;
          case 21: 
            { return CobolTypes.POWER_OP ;
            } 
            // fall through
          case 121: break;
          case 22: 
            { return CobolParserDefinition.COMMENT;
            } 
            // fall through
          case 122: break;
          case 23: 
            { return CobolTypes.MORE_EQUAL_OP;
            } 
            // fall through
          case 123: break;
          case 24: 
            { return CobolTypes.IS;
            } 
            // fall through
          case 124: break;
          case 25: 
            { return CobolTypes.IN;
            } 
            // fall through
          case 125: break;
          case 26: 
            { return CobolTypes.IF;
            } 
            // fall through
          case 126: break;
          case 27: 
            { return CobolTypes.LESS_EQUAL_OP;
            } 
            // fall through
          case 127: break;
          case 28: 
            { return CobolTypes.TO;
            } 
            // fall through
          case 128: break;
          case 29: 
            { return CobolTypes.OF;
            } 
            // fall through
          case 129: break;
          case 30: 
            { return CobolTypes.OR;
            } 
            // fall through
          case 130: break;
          case 31: 
            { return CobolTypes.BY;
            } 
            // fall through
          case 131: break;
          case 32: 
            { return CobolTypes.PIC_TYPE_SIGNED_NUMERIC;
            } 
            // fall through
          case 132: break;
          case 33: 
            { return CobolTypes.PIC_TYPE_DECIMAL_NUMERIC;
            } 
            // fall through
          case 133: break;
          case 34: 
            { return CobolTypes.FLOAT;
            } 
            // fall through
          case 134: break;
          case 35: 
            { return CobolTypes.SET;
            } 
            // fall through
          case 135: break;
          case 36: 
            { return CobolTypes.DAY;
            } 
            // fall through
          case 136: break;
          case 37: 
            { return CobolTypes.END;
            } 
            // fall through
          case 137: break;
          case 38: 
            { return CobolTypes.NOT;
            } 
            // fall through
          case 138: break;
          case 39: 
            { return CobolTypes.ADD;
            } 
            // fall through
          case 139: break;
          case 40: 
            { return CobolTypes.AND;
            } 
            // fall through
          case 140: break;
          case 41: 
            { return CobolTypes.ALL;
            } 
            // fall through
          case 141: break;
          case 42: 
            { yybegin(ITEM_TYPE); return CobolTypes.PIC;
            } 
            // fall through
          case 142: break;
          case 43: 
            { return CobolTypes.INTO;
            } 
            // fall through
          case 143: break;
          case 44: 
            { return CobolTypes.DATE;
            } 
            // fall through
          case 144: break;
          case 45: 
            { return CobolTypes.DATA;
            } 
            // fall through
          case 145: break;
          case 46: 
            { return CobolTypes.ELSE;
            } 
            // fall through
          case 146: break;
          case 47: 
            { return CobolTypes.NULL;
            } 
            // fall through
          case 147: break;
          case 48: 
            { return CobolTypes.TIME;
            } 
            // fall through
          case 148: break;
          case 49: 
            { return CobolTypes.TRUE;
            } 
            // fall through
          case 149: break;
          case 50: 
            { return CobolTypes.THEN;
            } 
            // fall through
          case 150: break;
          case 51: 
            { return CobolTypes.THROUGH;
            } 
            // fall through
          case 151: break;
          case 52: 
            { return CobolTypes.FROM;
            } 
            // fall through
          case 152: break;
          case 53: 
            { return CobolTypes.CALL;
            } 
            // fall through
          case 153: break;
          case 54: 
            { return CobolTypes.COPY;
            } 
            // fall through
          case 154: break;
          case 55: 
            { return CobolTypes.CORR;
            } 
            // fall through
          case 155: break;
          case 56: 
            { return CobolTypes.MOVE;
            } 
            // fall through
          case 156: break;
          case 57: 
            { return CobolTypes.ZERO;
            } 
            // fall through
          case 157: break;
          case 58: 
            { return CobolTypes.SPACE;
            } 
            // fall through
          case 158: break;
          case 59: 
            { return CobolTypes.VALUE;
            } 
            // fall through
          case 159: break;
          case 60: 
            { return CobolTypes.USING;
            } 
            // fall through
          case 160: break;
          case 61: 
            { return CobolTypes.QUOTE;
            } 
            // fall through
          case 161: break;
          case 62: 
            { yybegin(YYINITIAL); return CobolTypes.VALUE;
            } 
            // fall through
          case 162: break;
          case 63: 
            { return CobolTypes.DIVIDE;
            } 
            // fall through
          case 163: break;
          case 64: 
            { return CobolTypes.END_IF;
            } 
            // fall through
          case 164: break;
          case 65: 
            { return CobolTypes.ACCEPT;
            } 
            // fall through
          case 165: break;
          case 66: 
            { return CobolTypes.AUTHOR;
            } 
            // fall through
          case 166: break;
          case 67: 
            { return CobolTypes.GIVING;
            } 
            // fall through
          case 167: break;
          case 68: 
            { return CobolTypes.DISPLAY;
            } 
            // fall through
          case 168: break;
          case 69: 
            { return CobolTypes.NUMERIC;
            } 
            // fall through
          case 169: break;
          case 70: 
            { return CobolTypes.COMPUTE;
            } 
            // fall through
          case 170: break;
          case 71: 
            { return CobolTypes.PROGRAM;
            } 
            // fall through
          case 171: break;
          case 72: 
            { return CobolTypes.RENAMES;
            } 
            // fall through
          case 172: break;
          case 73: 
            { return CobolTypes.YYYYDDD;
            } 
            // fall through
          case 173: break;
          case 74: 
            { return CobolTypes.SECURITY;
            } 
            // fall through
          case 174: break;
          case 75: 
            { return CobolTypes.SUBTRACT;
            } 
            // fall through
          case 175: break;
          case 76: 
            { return CobolTypes.NEGATIVE;
            } 
            // fall through
          case 176: break;
          case 77: 
            { return CobolTypes.POSITIVE;
            } 
            // fall through
          case 177: break;
          case 78: 
            { return CobolTypes.MULTIPLY;
            } 
            // fall through
          case 178: break;
          case 79: 
            { return CobolTypes.YYYYMMDD;
            } 
            // fall through
          case 179: break;
          case 80: 
            { return CobolTypes.REDEFINES;
            } 
            // fall through
          case 180: break;
          case 81: 
            { return CobolTypes.REPLACING;
            } 
            // fall through
          case 181: break;
          case 82: 
            { return CobolTypes.REMAINDER;
            } 
            // fall through
          case 182: break;
          case 83: 
            { return CobolTypes.LOW_VALUE;
            } 
            // fall through
          case 183: break;
          case 84: 
            { return CobolTypes.INITIALIZE;
            } 
            // fall through
          case 184: break;
          case 85: 
            { return CobolTypes.ALPHABETIC;
            } 
            // fall through
          case 185: break;
          case 86: 
            { return CobolTypes.PROGRAM_ID;
            } 
            // fall through
          case 186: break;
          case 87: 
            { return CobolTypes.HIGH_VALUE;
            } 
            // fall through
          case 187: break;
          case 88: 
            { return CobolTypes.DAY_OF_WEEK;
            } 
            // fall through
          case 188: break;
          case 89: 
            { return CobolTypes.INSTALLATION;
            } 
            // fall through
          case 189: break;
          case 90: 
            { return CobolTypes.DATE_WRITTEN;
            } 
            // fall through
          case 190: break;
          case 91: 
            { return CobolTypes.ALPHANUMERIC;
            } 
            // fall through
          case 191: break;
          case 92: 
            { return CobolTypes.DATE_COMPILED;
            } 
            // fall through
          case 192: break;
          case 93: 
            { return CobolTypes.DATA_DIVISION;
            } 
            // fall through
          case 193: break;
          case 94: 
            { return CobolTypes.CORRESPONDING;
            } 
            // fall through
          case 194: break;
          case 95: 
            { return CobolTypes.LINKAGE_SECTION;
            } 
            // fall through
          case 195: break;
          case 96: 
            { return CobolTypes.PROCEDURE_DIVISION;
            } 
            // fall through
          case 196: break;
          case 97: 
            { return CobolTypes.ENVIRONMENT_DIVISION;
            } 
            // fall through
          case 197: break;
          case 98: 
            { return CobolTypes.LOCAL_STORAGE_SECTION;
            } 
            // fall through
          case 198: break;
          case 99: 
            { return CobolTypes.IDENTIFICATION_DIVISION;
            } 
            // fall through
          case 199: break;
          case 100: 
            { return CobolTypes.WORKING_STORAGE_SECTION;
            } 
            // fall through
          case 200: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
